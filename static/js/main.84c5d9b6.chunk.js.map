{"version":3,"sources":["layout/Footer.js","Questions.js","quiz/DescriptionBox.js","quiz/QuestionBox.js","quiz/SingleAnswerGroup.js","pages/QuizPage.js","pages/IntroPage.js","quiz/ScoreStepper.js","pages/ScorePage.js","App.js","index.js"],"names":["Copyright","Typography","variant","color","Link","href","Date","getFullYear","useStyles","makeStyles","theme","footer","padding","spacing","marginTop","backgroundColor","palette","type","grey","Footer","classes","className","Container","maxWidth","questions","questionText","answerOptions","answerText","score","description","DescriptionBox","props","Card","CardContent","gutterBottom","ReactHtmlParser","QuestionBox","currentIndex","totalQuestions","text","SingleAnswerGroup","FormControl","component","RadioGroup","aria-label","name","value","currentAnswerIndex","onChange","answers","map","answerOption","index","FormControlLabel","key","toString","control","Radio","label","QuizzPage","useState","currentQuestionIndex","setCurrentQuestion","setCurrentAnswerIndex","isTheLastQuestion","length","Grid","item","event","target","Button","onClick","currentAnswerScore","updateScore","handleNextQuestionButton","IntroPage","stepper","flexDirection","ScoreStepper","steps","min","max","team","scoreInRange","step","root","Stepper","orientation","Step","expanded","active","StepLabel","StepContent","ScorePage","maximum","container","xs","md","display","minHeight","main","marginBottom","App","setScore","CssBaseline","direction","justifyContent","alignItems","basename","process","path","number","exactPath","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.84c5d9b6.chunk.js","sourcesContent":["import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Link from '@material-ui/core/Link';\nimport Container from '@material-ui/core/Container';\nimport { makeStyles } from '@material-ui/core/styles';\n\nfunction Copyright() {\n\treturn (\n\t  <Typography variant=\"body2\" color=\"textSecondary\">\n\t\t{'Copyright © '}\n\t\t<Link color=\"inherit\" href=\"https://howto.stringconcat.com/\">\n\t\t  StringConcat\n\t\t</Link>{' '}\n\t\t{new Date().getFullYear()}\n\t\t{'.'}\n\t  </Typography>\n\t);\n  }  \n\n  const useStyles = makeStyles((theme) => ({\n\tfooter: {\n\t  padding: theme.spacing(3, 2),\n\t  marginTop: 'auto',\n\t  backgroundColor:\n\t\ttheme.palette.type === 'light' ? theme.palette.grey[200] : theme.palette.grey[800],\n\t},\n  }));\n\n  export default function Footer() {\n\n\tconst classes = useStyles();\n\n\treturn (\n\t\t<footer className={classes.footer}>\n\t\t<Container maxWidth=\"md\">\n\t\t  <Typography variant=\"body1\">Сделано с любовью</Typography>\n\t\t  <Copyright />\n\t\t</Container>\n\t  </footer>  \n\t)\n  }\n","export const questions = [\n    {\n        questionText: 'Как команда собирает требования?',\n        answerOptions: [\n            { \n                answerText: 'Применяем водопадную модель. Аналитики анализируют весь проект наперед ', \n                score: -1\n            },\n            { \n                answerText: 'Аналитики со стейкхолдерами — клиентами и бизнесом — прорабатывают требования на 2–3 спринта, формализуют их в ТЗ и отдают разработчикам', \n                score: 2\n            },\n            { \n                answerText: 'Аналитики запираются в комнате без окон, прорабатывают требования на 2–3 спринта и кидают в разработчиков ТЗ', \n                score: 0 \n            },\n            { \n                answerText: 'Аналитики и разработчики сообща работают в спринте над реализацией. Постановки не высечены в камне и изменяются после обсуждения с инженерами', \n                score: 2 \n            },\n        ],\n        description: `\n        <p>В первую очередь проверьте компанию на водопадность.</p>\n        <p>\n            Даже самая распоследняя водопадная компания вам ни за что не скажет, что работает по водопаду. \n            Сейчас весь мир agile. Но есть пропасть между <i>be agile</i> и <i>do agile</i>. И только в <i>be agile</i> командах \n            у вас может появиться возможность комфортно писать качественный софт и влиять на решения, а не просто реализовывать ТЗ.\n        </p>    \n        <p>\n            Для <i>be agile</i> команде нужна ранняя обратная связь от пользователей. \n            Только это позволяет решать реальные проблемы и развивать продукт. \n            Для этого нужно, чтобы аналитики поговорили с живыми людьми, \n            а ещё лучше провели А/Б тестирование прототипов пользовательского интерфейса.\n        </p>`\n            \n    },\n    {\n        questionText: 'Как прорабатываются задачи перед уходом в разработку?',\n        answerOptions: [\n            { answerText: 'Задачи обсуждаются с Dev, QA или BA', score: 2 },\n            { answerText: 'Зачем их прорабатывать, взял и сделал', score: 0 }\n        ],\n        description: `\n            <p>\n                Ответ на этот вопрос помогает понять, используется ли на проекте true agile процесс и shift-left quality approach.\n            </p>\n            <p>\n                В <i>do agile</i> командах вы никогда не встретите BE, Dev и QA, работающих над одной задачей и даже в одном спринте. \n                Но это одно из  основополагающих отличий. \n            </p>\n            <p>\n                BA не должны писать постановки про запас, а после кидать их в разработчиков с дежурным отговоркой «читай, там всё написано».\n                QA должны подключаться уже на этапе проработки требований и обдумывать задачу с точки зрения edge-кейсов.\n            </p>\n            <p>\n                В итоге команда не пишет код, пока не рассмотрит задачу с точек зрения бизнеса, возможностей разработки, качества и безопасности. И каждый из участников будет иметь равный голос и право на разумное «нет». \n            </p>\n            <p>\n                Если вы нашли команду, в которой каждая задача обсуждается тремя амиго — будьте уверены, с agile там всё в порядке.\n            </p>\n        `\n    },\n    {\n        questionText: 'Как фиксируются принятые архитектурные решения',\n        answerOptions: [\n            { answerText: 'В Architectural Decision Record фиксируются все «Почему» ', score: 2 },\n            { answerText: 'В таск-трекере заводят задачи, в которых расписаны все «Как». Например, прикрутить kafka', score: 0 },\n            { answerText: 'Решения не фиксируются', score: 0 },\n        ],\n        description: `\n        <p>\n            Плохо дело, когда команда не может вспомнить, почему выбрали MongoDB или куда-то натыкали микросервисов. \n            ак «исторически сложилось» или тимлид принёс с последней high-load конференции, но суть в том, что никто не вспомнит, \n            на основании чего принимались решения.\n        </p>\n        <p>\n            Без понимания причин команда обречена ходить по кругу, как в кино про день сурка. \n            Монолит → распределенная структура  → монолит, и так, пока все не выгорят.\n        </p>\n        <p>\n            Зрелые команды ведут Architectural Decision Records, в которых фиксируют значимые архитектурные решения, \n            их причины, альтернативы, плюсы и минусы.\n        </p>\n        <p>\n            Таски в Jira для этого плохо подходят. В них редко записывают результат исследования и причины изменений. \n            А сами таски часто теряются. Попробуйте найти задачу, закрытую два года назад.\n        </p>`\n    },\n    {\n        questionText: 'Можно ли начать полноценно разрабатывать в первый же рабочий день?',\n        answerOptions: [\n            { answerText: 'Да, команда выдаст доступы, можно тут же развернуть и запустить проект ', score: 2 },\n            { answerText: 'Нет, весь первый день уйдёт на бумажки и получение доступов', score: 0 },\n        ],\n        description: `\n        <p>\n            Вопрос помогает оценить степень бюрократии на проекте и производственную культуру. \n        </p>\n        <p>\n            Если заведение всех нужных учёток занимает недели, представьте, что там у них с другими процессами.\n        </p>\n        <p>\n            Скорость и простота развертывания тоже много вам скажут.\n        </p>\n        <p>\n            Например, тимлид хвастается, что у них такой большой и важный проект, что его нельзя просто так взять и развернуть. \n            У новичка на это уходит три дня, а у гениального новичка — всего два.\n        </p>\n        <p>\n            Но три дня на развертывание говорят только о том, что тимлид не понимает своей основной задачи — упрощать работу разработчиков.\n        </p>\n        <p>\n            Любой проект должен собираться и запускаться по одной команде. \n            Если вместо кнопки длинный readme по запуску, поздравляю, вы нашли зону роста. Конвертируйте readme в bash-скрипт.\n        </p>`\n    },\n    {\n        questionText: 'Получится ли комфортно работать с личного ноута на необитаемом острове, где есть только 3G',\n        answerOptions: [\n            { answerText: 'Да, но, возможно, первый билд пройдёт немного болезненно', score: 2 },\n            { answerText: 'В принципе да, но будут проблемы', score: 1 },\n            { answerText: 'Нет, какой ноут, какой остров?', score: 0 },\n        ],\n        description: `\n        <p>\n            Даже если вы не собираетесь работать под пальмой в Таиланде, хорошо бы понимать, \n            сколько телодвижений необходимо для начала работы. А именно:\n            <ul>\n                <li>сколько всякого рода VPNов надо подключить, чтобы добраться до репозитория или продакшена</li>\n                <li>доступны ли трекеры задач, хранилища артефактов и прочая инфраструктура извне</li>\n                <li>сможете ли вы достучаться до DEV-кластера не из сети компании. Или вы вообще не сможете собрать билд, потому что кто-то включил обращения к тестовому серверу в unit-тесты.</li>\n            </ul>\n        </p>\n        <p>\n            Из всего этого безобразия складывается удобство работы.\n        </p>`\n    },\n    {\n        questionText: 'Можно ли локально запустить кластер, состоящий из большинства разрабатываемых приложений и прогнать на нём e2e-тесты',\n        answerOptions: [\n            { answerText: 'Он запускается одной кнопкой (одним bash-скриптом) ', score: 2 },\n            { answerText: 'Можно, но нужно стартовать и настраивать каждое приложение', score: 1 },\n            { answerText: 'Звучит сложно, ни разу не пробовали', score: 0 },\n        ],\n        description: `\n        <p>\n            Правило хорошего тона: весь кластер можно запускать локально и натравливать e2e-тесты. \n        </p>\n        <p>\n            Это значительно упрощает жизнь при фиксе багов, настройке CI и тестировании фич.\n        </p>\n        <p>\n            Для первоначальной настройки CI потребуются ровно те же действия, что и для локального запуска. Удаленный кластер не придётся настраивать, если работает локально — заработает и на CI-сервере.\n        </p>\n        <p>\n        Представьте, что новая фича пронизывает несколько микросервисов. Вы разрабатываете на одном, пушите код в мастер, чтобы он появился на стенде, переключаетесь на другой микросервис, конектитесь к первому на только что разработанный endpoint и находите в нём ошибку. \n        Переключаетесь на первый, пушите в репозиторий, проходите код ревью, мержите в мастер. С локальным запуском можно сразу развернуть кластер и тестировать такую фичу end-to-end.\n        </p>`\n    },\n    {\n        questionText: 'Как быстро коммит по рядовой задаче окажется на Проде?',\n        answerOptions: [\n            { answerText: 'К концу дня', score: 2 },\n            { answerText: 'К концу итерации ', score: 1 },\n            { answerText: 'Это решит бизнес, гадая на курице с отрубленной головой', score: 0 },\n        ],\n        description: `\n        <p>\n\n        </p>\n        <p>\n\n        </p>`\n    },\n    {\n        questionText: 'Что можно пропустить, когда дедлайн уже близок',\n        answerOptions: [\n            { answerText: 'Написание Unit-тестов', score: 0 },\n            { answerText: 'Написание e2e-тестов ', score: 0 },\n            { answerText: 'Отложить задачи из технического беклога', score: 0 },\n            { answerText: 'Ничего из вышеперечисленного', score: 2 },\n        ],\n        description: `\n        <p>\n            Дедлайн показывает, во что человек верит по-настоящему. Мы используем различные практики, чтобы снижать стоимость, \n            расход нервов и время разработки. Отказ от практик говорит о дефиците веры в их эффективность.\n        </p>`\n    },\n    {\n        questionText: 'Как прорабатывается графический интерфейс приложения?',\n        answerOptions: [\n            { answerText: 'Над ним работает UX-дизайнер, имплементируют разработчики', score: 2 },\n            { answerText: 'Фронтенд-разработчики раскидывают кнопки и инпуты, получается ок ', score: 0 },\n        ],\n        description: `\n        <p>\n            Интерфейс Jenkins — отличный пример того, что получается у разработчиков без участия UX-дизайнера. \n            Гоните прочь мысль, что верстальщик раскидает кнопочки, а пользователь уж как-нибудь разберётся.\n        </p>\n        <p>\n            Грамотный UX дизайнер сделает интерфейс человекочитаемым. \n            Проработает архитектуру информации, чтобы пользователь легко находил нужное. Проследит за единообразием стиля, ч\n            тобы дружелюбное приветствие на главной совпадало по тону с сообщениями об ошибках. \n            Проверит дизайн на пользователях и внесет доработки по результатам этих тестов. Верстальщик так не сможет.\n        </p>\n        <p>\n            Если пользователю не комфортно работать с приложением, неважно, сколько килореквестов в секунду оно обрабатывает.\n        </p>`\n    },\n    {\n        questionText: 'Как точнее всего описывается архитектура проекта?',\n        answerOptions: [\n            { answerText: 'Через инструменты. Например, «REST сервисы на Spring Boot, на беке у нас hibernate c PostgreSQL»', score: 0 },\n            { answerText: 'Через контексты бизнеса и модули. Например, «сервис с распределенной архитектурой и асинхронной обработкой сообщений, поскольку разные пользователи и сценарии чувствительны к разным архитектурным характеристикам» ', score: 2 },\n        ],\n        description: `\n        <p>\n            Архитектура — расплывчатое понятие и описывают её как угодно, от инфраструктуры до организации бизнес-процессов. \n            Важно понять, что преобладает в голове у её авторов: выбранные инструменты или причины выбора этих инструментов. \n            Хорошо, когда причины преобладают.\n        </p>\n        <p>\n            Например, можно ли понять, почему выбрали новомодную Кафку? \n            Она действительно нужна или она переваривает по 5 сообщений в день просто потому, что техлид принес её с последней конференции.\n        </p>`\n    },\n    {\n        questionText: 'Работа с техническим долгом',\n        answerOptions: [\n            { answerText: 'Бэклог приоритезирован, пополняется ежедневно. Технический долг считается first class citizens ', score: 2 },\n            { answerText: 'Задачами из технического бэклога занимаются после задач бизнеса, когда в спринте остаются пустые места', score: 1 },\n            { answerText: 'Технический бэклог не ведется', score: 0 },\n        ],\n        description: `\n        <p>\n            Здоровые команды профессионалов часто не делят бэклог на технический долг и фичи, а осознают их важность для продукта в конкретной ситуации. \n            В такой команде PM будет настаивать на закрытии техдолга, а разработчики — на внедрении фич, особенно если они сами пользуются своим продуктом.\n        </p>`\n    },\n    {\n        questionText: 'Насколько здорова пирамида тестирования?',\n        answerOptions: [\n            { answerText: 'Образцовая. Обширная база unit-тестов, применение TDD, интеграционных тестов, e2e и немного behavior-тестов', score: 2 },\n            { answerText: 'Песочные часы. Много Unit, много behavior-тестов, которые написаны QA, а в середине почти пусто', score: 1 },\n            { answerText: 'Сложно сказать', score: 0 },\n            { answerText: 'Стартапу тесты ни к чему, главное — рост и захват рынка!', score: 0 },\n        ],\n        description: `\n        <p>\n            Здоровая пирамида тестирования снижает потери нервных клеток при деплое и позволяет перейти к continuous deployment при необходимости.\n        </p>\n        <p>\n            Отсутствие тестов — явный признак ручного «приемочного тестирования» и ежемесячной релизной лихорадки, \n            когда кто-то задорно мержит в уже протестированное, и прочее дно кровавого энтерпрайза.\n        </p>`\n    },\n    {\n        questionText: 'Чем занимаются тестировщики?',\n        answerOptions: [\n            { answerText: 'Анализируют задачи перед принятием в работу, находят в задаче edge cases ещё до начала разработки, могут разрабатывать наравне с программистами', score: 2 },\n            { answerText: 'Ручным тестированием перед релизом', score: 0 },\n            { answerText: 'Автоматизированным тестированием, покрывают функции приложения e2e-тестами', score: 0 },\n            { answerText: 'В команде нет тестировщиков', score: 1 },\n        ],\n        description: `\n        <p>\n            Отлично, если QA могут разрабатывать совместно с программистом. \n            Совсем отлично, когда QA — не должность, а роль, которую попеременно выполняют члены команды или берут на себя особо ответственные. \n            В таких командах может не быть формального QA.\n        </p>\n        <p>\n            Антипаттерн — тестировщики занимаются «приемочным тестированием»: присоединяются к задаче в конце и начинают её возвращать на доработку. \n            В худшем случае задача переделывается целиком.\n        </p>\n        <p>\n            В промежуточном варианте тестировщики могут похвастаться, что написали 100 автотестов и покрыли 25 % функций, \n            осталось написать ещё 300. Это говорит о двух вариантах:\n            <ul>\n                <li>Разработчики пишут unit-тесты и вместо пирамиды тестирования у них песочные часы.</li>\n                <li>Разработчики тестов не пишут и у них перевернутая пирамида.</li>\n            </ul>\n        </p>\n        <p>\n            В любом случае есть вероятность, что тестировщики в своих BDD-тестах ощутимо далеки от тестов, написанных разработчиками. \n            Это значит, что тесты QA будут хрупкими и тяжелыми. Изменится вёрстка, добрая половина тестов отвалится и их буду чинить весь спринт.\n        </p>\n        `\n    },\n    {\n        questionText: 'При каких условиях свалится локальный билд?',\n        type: 'multi',\n        answerOptions: [\n            { answerText: 'Зафейлился один из тестов', score: 0.5 },\n            { answerText: 'Неиспользуемый импорт', score: 0.5 },\n            { answerText: 'Код не соответствует стандарту кодирования', score: 0.5 },\n            { answerText: 'Есть потенциальный баг', score: 0.5 },\n        ],\n        description: `\n        <p>\n            Локальный билд обязан валиться при сломанном тесте, жалобах линтеров на потенциальные ошибки в коде или на стиль кодирования.\n        </p>\n        <p>\n            Мы говорим именно о локальном билде, а не о CI-pipeline из-за shift-left подхода. Жалобу локального сборщика проще заметить и принять меры. \n            Если же что-то отвалится на CI, вы заметите это лет через десять, когда весь контекст будет утерян.\n        </p>`\n    },\n    {\n        questionText: 'Используется ли TDD?',\n        answerOptions: [\n            { answerText: 'Да, продакшн-код пишется после тестов для него. На написание теста уходит 2–3 минуты', score: 2 },\n            { answerText: 'Покрытие тестами идёт отдельной задачей ', score: 0 },\n            { answerText: 'Нет', score: 0 },\n        ],\n        description: `\n        <p>\n            Наличие одних unit-тестов не гарантирует безошибочную работу приложения. \n            Важен не инструмент, а процесс. Если при сборке приложения отваливается один из тестов — приложение однозначно сломано. \n            Но с зелёной полосой нет никакой гарантии, что ошибок нет. С TDD всё однозначно: красная полоса — фиксим, зеленая — выкатываем на прод. \n        </p>`\n    },\n    {\n        questionText: 'Сколько часов команда переработала за последний месяц?',\n        answerOptions: [\n            { answerText: 'Никаких переработок', score: 2 },\n            { answerText: 'Пришлось немного поднапрячься к концу проекта', score: 0 },\n            { answerText: 'Переработки в норме и поощряются', score: 0 },\n        ],\n        description: `\n        <p>\n            IT-сообщество регулярно развлекается научным обоснованием неизбежности и необходимости переработок. Но переработки имеют три простые причины:\n        </p>\n        <p>\n            <b>Проект изначально не помещался в бюджет.</b> \n            Условно, по оценке нужно полтора года, но у заказчика денег только на год. \n            Часто менеджеры решают влезть в деньги за счёт ускорения разработки и неизбежного кранча перед дедлайном. \n        </p>\n        <p>\n            <b>Проект неправильно оценили и он сильно затягивается.</b> \n            Разработчиков это волновать не должно, но закрывать брешь придётся им.\n        </p>\n        <p>\n            <b>В компании такая традиция.</b>\n            Авторам встречались команды, настолько привыкшие перерабатывать, что сидят по вечерам и выходным без особой необходимости. \n            Сами сидят и осуждают новичков, которые пытаются уйти после шести вечера.\n        </p>\n        <p>\n            Если проекту не хватает времени, денег или производственной культуры, \n            то недостающее всегда покрывается ресурсом разработчиков: их личным временем, здоровьем и нервами.\n        </p>\n        `\n    },\n    {\n        questionText: 'Как команда узнает о проблемах на проде?',\n        answerOptions: [\n            { answerText: 'От менеджера, который прочитал о падении сервиса в твиттере конкурентов', score: 0 },\n            { answerText: 'Из мониторинга, задолго до того, как основная часть пользователей что-то заметит ', score: 2 },\n        ],\n        description: `\n        <p>\n            Без нормального логирования и мониторинга разработчики обречены копаться в логах прода. \n            При этом мониторинг должен отображать и состояние систем, с которыми интегрирован сервис.\n             Иначе можно провести час по пояс в логах и с наскипидаренным менеджером за спиной, \n             чтобы понять, что лежит не сам сервис, а биллинг партнёров.\n        </p>`\n    },\n];","import React from 'react';\nimport Card from '@material-ui/core/Card';\nimport Typography from '@material-ui/core/Typography';\nimport CardContent from '@material-ui/core/CardContent';\nimport ReactHtmlParser from \"react-html-parser\";\n\nexport default function DescriptionBox(props) {\n\n    return (\n        <Card variant=\"outlined\">\n            <CardContent>\n                <Typography variant=\"body1\" gutterBottom>\n                    {ReactHtmlParser(props.description)}\n                </Typography>\n            </CardContent>\n        </Card>\n    );\n}","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\n\nexport default function QuestionBox(props) {\n    return (\n        <>\n            <Typography variant=\"subtitle1\" gutterBottom>\n                Вопрос {props.currentIndex + 1} из {props.totalQuestions}\n            </Typography>\n            <Typography variant=\"h3\" gutterBottom>\n                {props.text}\n            </Typography>\n        </>\n    )\n}","import React from 'react';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\n\nexport default function SingleAnswerGroup(props) {\n\n    return (\n        <FormControl component=\"fieldset\">\n            <RadioGroup aria-label=\"anwers\" name=\"answers\" value={props.currentAnswerIndex} onChange={props.onChange}>\n                {\n                    props.answers.map(\n                        (answerOption, index) =>\n                            <FormControlLabel\n                                key={index.toString()}\n                                value={index.toString()}\n                                control={<Radio color={answerOption.score > 0 ? \"primary\" : \"secondary\"}/>}\n                                label={answerOption.answerText}\n                            />\n                    )\n                }\n            </RadioGroup>\n        </FormControl>\n    )\n}","import React, {useState} from 'react';\nimport {Button} from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport {questions} from '../Questions';\nimport DescriptionBox from '../quiz/DescriptionBox';\nimport QuestionBox from '../quiz/QuestionBox';\nimport SingleAnswerGroup from '../quiz/SingleAnswerGroup';\nimport MultiAnswerGroup from '../quiz/MultiAnswerGroup';\n\nexport default function QuizzPage(props) {\n\n    const [currentQuestionIndex, setCurrentQuestion] = useState(0);\n    const [currentAnswerIndex, setCurrentAnswerIndex] = useState(-1)\n\n    const handleNextQuestionButton = () => {\n        const currentAnswerScore = questions[currentQuestionIndex].answerOptions[currentAnswerIndex].score\n        props.updateScore(currentAnswerScore)\n\n        if (!isTheLastQuestion(currentQuestionIndex)) {\n            setCurrentQuestion(currentQuestionIndex + 1)\n        }\n\n        setCurrentAnswerIndex(-1)\n    }\n\n\n    const handleAnswerChange = (event) => {\n        setCurrentAnswerIndex(event.target.value)\n    };\n\n    function isTheLastQuestion() {\n        return currentQuestionIndex + 1 === questions.length\n    }\n\n    return (\n        <>\n            <Grid item>\n                <QuestionBox\n                    text={questions[currentQuestionIndex].questionText}\n                    currentIndex={currentQuestionIndex}\n                    totalQuestions={questions.length}\n                />\n            </Grid>\n\n            <Grid item>\n                <SingleAnswerGroup\n                    onChange={handleAnswerChange}\n                    answers={questions[currentQuestionIndex].answerOptions}\n                    currentAnswerIndex={currentAnswerIndex}\n                />\n                {/*<MultiAnswerGroup*/}\n                {/*\tonChange={handleAnswerChange}*/}\n                {/*\tanswers={questions[currentQuestionIndex].answerOptions}*/}\n                {/*\tcurrentAnswerIndex={currentAnswerIndex}*/}\n                {/*/>*/}\n            </Grid>\n\n            <Grid item>\n                {currentAnswerIndex !== -1 ? (\n                    <DescriptionBox description={questions[currentQuestionIndex].description}/>\n                ) : (<></>)\n                }\n            </Grid>\n\n            <Grid item>\n                {currentAnswerIndex !== -1 ? (\n                    !isTheLastQuestion() ? (\n                        <Button variant=\"outlined\" color=\"primary\" onClick={() => handleNextQuestionButton()}>Следующий\n                            вопрос</Button>\n                    ) : (\n                        <Button variant=\"outlined\" color=\"primary\" href=\"#/score\">Результаты</Button>\n                    )\n                ) : (<></>)\n                }\n            </Grid>\n        </>\n    );\n}\n","import React from 'react';\nimport {Button} from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\n\nexport default function IntroPage() {\n\n    return (\n        <>\n            <Grid item>\n                <Typography variant=\"subtitle1\" gutterBottom>\n                    StringConcat тест\n                </Typography>\n                <Typography variant=\"h3\" gutterBottom>\n                    17 вопросов для оценки кровавости энтерпрайза\n                </Typography>\n            </Grid>\n\n            <Grid item>\n                <Typography variant=\"body1\" gutterBottom>\n                    <p>\n                        Мы составили тест, который поможет вам дистанционно оценить глубину кроличьей норы.\n                        Пройдите сами, чтобы проверить текущую команду, или отправьте потенциальному работодателю.\n                    </p>\n                    <p>\n                        Тест вдохновлён <a href=\"https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/\"> опросником Джоэля Спольски\n                        </a>, который придумал StackOverflow. Опроснику уже двадцать лет,\n                        так что мы его немного расширили и доработали.\n                    </p>\n                </Typography>\n            </Grid>\n\n            <Grid item>\n                <Button variant=\"outlined\" color=\"primary\" href=\"#/quiz\">Начать</Button>\n            </Grid>\n        </>\n    );\n}\n","import React from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport StepContent from '@material-ui/core/StepContent';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles((theme) => ({\n    stepper: {\n        flexDirection: 'column-reverse'\n    },\n}));\n\nfunction getSteps() {\n    return [\n        {\n            min: -10,\n            max: 6,\n            label: {\n                score: '< 7',\n                team: 'Бежать',\n                description: 'Если компания небольшая и вы уверены в своих силах реформатора, можно попробовать.'\n\n            },\n        },\n        {\n            min: 7,\n            max: 12,\n            label: {\n                score: '7–12',\n                team: 'Проблемная команда',\n                description: 'Важно понять, входят ли проблемы в вашу зону ответственности. Если не входят, просить выше среднего по рынку. Если вы сможете повлиять на проблемы и понравился коллектив, можно пробовать.'\n            },\n        },\n        {\n            min: 13,\n            max: 17,\n            label: {\n                score: '13–17',\n                team: 'Хорошая команда',\n                description: 'Комфортные условия, возможность чему-то научиться и привнести своего.'\n            },\n        },\n        {\n            min: 18,\n            max: 24,\n            label: {\n                score: '18–24',\n                team: 'Очень хорошая команда',\n                description: 'Стоит рассматривать, даже если предлагают чуть ниже рынка.'\n            },\n        },\n        {\n            min: 25,\n            max: 40,\n            label: {\n                score: '> 25',\n                team: 'Элита',\n                description: 'Можно смело устраиваться. Если не наврали, работать будет комфортно.'\n            },\n        },\n    ]\n}\n\nexport default function ScoreStepper(props) {\n    const classes = useStyles();\n    const steps = getSteps()\n\n    const scoreInRange = (score, step) => step.min <= score && score <= step.max;\n\n    return (\n        <div className={classes.root}>\n            <Stepper className={classes.stepper} orientation=\"vertical\">\n\n                {steps.map((step, index) => (\n                    <Step key={step.label.score} expanded={true} active={scoreInRange(props.score, step)}>\n                        <StepLabel>{step.label.score} <b>{step.label.team}</b></StepLabel>\n                        <StepContent>\n                            <Typography>{step.label.description}</Typography>\n                        </StepContent>\n                    </Step>\n                ))}\n            </Stepper>\n        </div>\n    );\n}","import React from 'react';\nimport {Button} from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport ScoreStepper from '../quiz/ScoreStepper';\n\nexport default function ScorePage(props) {\n\n    return (\n        <>\n            <Grid item>\n                <Typography variant=\"subtitle1\" gutterBottom>\n                    Результаты\n                </Typography>\n                <Typography variant=\"h3\" gutterBottom>\n                    Вы набрали {props.score} из {props.maximum}\n                </Typography>\n            </Grid>\n\n            <Grid item>\n                <ScoreStepper score={props.score}/>\n            </Grid>\n\n            <Grid item>\n                <Typography variant=\"body1\" gutterBottom>\n                    Мотивация\n                </Typography>\n            </Grid>\n\n            <Grid item container spacing={3}>\n                <Grid item xs={12} md={6}>\n                    <Button variant=\"outlined\" color=\"primary\" href=\"https://howto.stringconcat.com/\">Узнать как перейти\n                        на следующую ступень</Button>\n                </Grid>\n                <Grid item xs={12} md={6}>\n                    <Button variant=\"outlined\" href='#/quiz'>Пройти тест заново</Button>\n                </Grid>\n            </Grid>\n        </>\n    );\n}\n","import React, {useState} from 'react';\nimport {\n\tHashRouter as Router,\n\tSwitch,\n\tRoute,\n  } from \"react-router-dom\";\nimport Grid from '@material-ui/core/Grid';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Footer from './layout/Footer';  \n\n\nimport QuizzPage from './pages/QuizPage';\nimport IntroPage from './pages/IntroPage';\nimport ScorePage from './pages/ScorePage';\nimport VerticalLinearStepper from './quiz/ScoreStepper';\n\n\nconst useStyles = makeStyles((theme) => ({\n\troot: {\n\t  display: 'flex',\n\t  flexDirection: 'column',\n\t  minHeight: '100vh',\n\t},\n\tmain: {\n\t  marginTop: theme.spacing(8),\n\t  marginBottom: theme.spacing(2),\n\t},\n  }));\n\n\nexport default function App() {\n\n\tconst classes = useStyles();\n\n\tconst [score, setScore] = useState(0)\n\n\tconst changeScoreBy = (number) => {\n\t\tsetScore(score+number)\n\t}\n\n\treturn (\n\t\t<div className={classes.root}>\n\t\t\t<CssBaseline />\n\t\t\t<Container component=\"main\" className={classes.main} maxWidth=\"md\">\n\t\t\t\t<Grid container spacing={2} direction=\"column\" justifyContent=\"flex-start\" alignItems=\"stretch\">\n\t\t\t\t\t<Router basename={process.env.PUBLIC_URL}>  \n\t\t\t\t\t\t<Switch>\n\t\t\t\t\t\t\t<Route path=\"/quiz\">\n\t\t\t\t\t\t\t\t<QuizzPage updateScore={changeScoreBy} />\n\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t<Route path=\"/score\">\n\t\t\t\t\t\t\t\t<ScorePage score={score} maximum={34}/>\n\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t<Route exactPath=\"/\">\n\t\t\t\t\t\t\t\t<IntroPage />\n\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t</Switch>\n\t\t\t\t\t</Router>\n\t\t\t\t</Grid>\n\t\t\t</Container>\n\t\t<Footer/>\n\t  </div>\n\t);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}