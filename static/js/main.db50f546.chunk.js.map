{"version":3,"sources":["layout/Footer.js","quiz/DescriptionBox.js","quiz/QuestionBox.js","quiz/SingleAnswerGroup.js","quiz/MultiAnswerGroup.js","pages/QuizPage.js","pages/IntroPage.js","quiz/ScoreStepper.js","pages/ScorePage.js","questionnaire/Question.js","questionnaire/MultiQuestion.js","questionnaire/Questionnaire.js","App.js","Questions.js","index.js"],"names":["Copyright","Typography","variant","color","Link","href","Date","getFullYear","useStyles","makeStyles","theme","footer","padding","spacing","marginTop","backgroundColor","palette","type","grey","Footer","classes","className","Container","maxWidth","DescriptionBox","props","Card","CardContent","gutterBottom","ReactHtmlParser","description","QuestionBox","currentIndex","totalQuestions","text","SingleAnswerGroup","FormControl","component","RadioGroup","aria-label","name","value","currentAnswerIndex","onChange","answers","map","answerOption","index","FormControlLabel","key","toString","control","Radio","correct","label","answerText","MultiAnswerGroup","FormGroup","Checkbox","checked","currentAnswer","score","QuizzPage","location","useLocation","createState","query","URLSearchParams","search","has","questionnaire","reset","questionIndex","get","currentQuestion","switchToQuestion","questionText","number","currentQuestionNumber","givenAnswerIndex","isTheLastQuestion","nextQuestionIndex","useState","question","setQuestion","React","useEffect","Grid","item","event","giveAnswer","target","onScoreUpdated","answersCopy","slice","Button","IntroPage","stepper","flexDirection","ScoreStepper","steps","min","max","team","scoreInRange","step","root","Stepper","orientation","Step","expanded","active","StepLabel","StepContent","ScorePage","maximum","container","xs","md","Question","questionStructure","_givenAnswerIndex","_struct","answerHasBeenGiven","this","answerOptions","answer","resetAnswer","MultiQuestion","reduce","a","b","Questionnaire","questionnaireStruct","_currentQuestionIndex","questions","createQuestion","nextQuestion","length","forEach","display","minHeight","main","marginBottom","questionList","App","setScore","CssBaseline","direction","justifyContent","alignItems","basename","process","path","newScore","console","log","exactPath","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.db50f546.chunk.js","sourcesContent":["import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Link from '@material-ui/core/Link';\nimport Container from '@material-ui/core/Container';\nimport { makeStyles } from '@material-ui/core/styles';\n\nfunction Copyright() {\n\treturn (\n\t  <Typography variant=\"body2\" color=\"textSecondary\">\n\t\t{'Copyright © '}\n\t\t<Link color=\"inherit\" href=\"https://howto.stringconcat.com/\">\n\t\t  StringConcat\n\t\t</Link>{' '}\n\t\t{new Date().getFullYear()}\n\t\t{'.'}\n\t  </Typography>\n\t);\n  }  \n\n  const useStyles = makeStyles((theme) => ({\n\tfooter: {\n\t  padding: theme.spacing(3, 2),\n\t  marginTop: 'auto',\n\t  backgroundColor:\n\t\ttheme.palette.type === 'light' ? theme.palette.grey[200] : theme.palette.grey[800],\n\t},\n  }));\n\n  export default function Footer() {\n\n\tconst classes = useStyles();\n\n\treturn (\n\t\t<footer className={classes.footer}>\n\t\t<Container maxWidth=\"md\">\n\t\t  <Typography variant=\"body1\">Сделано с любовью</Typography>\n\t\t  <Copyright />\n\t\t</Container>\n\t  </footer>  \n\t)\n  }\n","import React from 'react';\nimport Card from '@material-ui/core/Card';\nimport Typography from '@material-ui/core/Typography';\nimport CardContent from '@material-ui/core/CardContent';\nimport ReactHtmlParser from \"react-html-parser\";\n\nexport default function DescriptionBox(props) {\n\n    return (\n        <Card variant=\"outlined\">\n            <CardContent>\n                <Typography variant=\"body1\" gutterBottom>\n                    {ReactHtmlParser(props.description)}\n                </Typography>\n            </CardContent>\n        </Card>\n    );\n}","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\n\nexport default function QuestionBox(props) {\n    return (\n        <>\n            <Typography variant=\"subtitle1\" gutterBottom>\n                Вопрос {props.currentIndex} из {props.totalQuestions}\n            </Typography>\n            <Typography variant=\"h3\" gutterBottom>\n                {props.text}\n            </Typography>\n        </>\n    )\n}","import React from 'react';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\n\nexport default function SingleAnswerGroup(props) {\n\n    return (\n        <FormControl component=\"fieldset\">\n            <RadioGroup aria-label=\"anwers\" name=\"answers\" value={props.currentAnswerIndex} onChange={props.onChange}>\n                {\n                    props.answers.map(\n                        (answerOption, index) =>\n                            <FormControlLabel\n                                key={index.toString()}\n                                value={index.toString()}\n                                control={<Radio color={answerOption.correct? \"primary\" : \"secondary\"}/>}\n                                label={answerOption.answerText}\n                            />\n                    )\n                }\n            </RadioGroup>\n        </FormControl>\n    )\n}","import React from 'react';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport {FormGroup} from '@material-ui/core';\nimport {Checkbox} from '@material-ui/core';\n\nexport default function MultiAnswerGroup(props) {\n\n    return (\n        <FormControl component=\"fieldset\">\n            <FormGroup>\n                {\n                    props.answers.map(\n                        (answerOption, index) =>\n                            <FormControlLabel\n                                value={index.toString()}\n                                control={\n                                    <Checkbox\n                                        checked={props.currentAnswer[index]}\n                                        onChange={props.onChange}\n                                        name={index}\n                                        color={answerOption.score > 0 ? \"primary\" : \"secondary\"}\n                                    />\n                                }\n                                label={answerOption.answerText}\n                            />\n                    )\n                }\n            </FormGroup>\n        </FormControl>\n    )\n}","import React, {useState} from 'react';\nimport {Button} from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport DescriptionBox from '../quiz/DescriptionBox';\nimport QuestionBox from '../quiz/QuestionBox';\nimport SingleAnswerGroup from '../quiz/SingleAnswerGroup';\nimport MultiAnswerGroup from '../quiz/MultiAnswerGroup';\nimport {\n    useLocation\n} from \"react-router-dom\";\n\nexport default function QuizzPage(props) {\n\n    const location = useLocation();\n\n    const createState= ()=> {\n        let query = new URLSearchParams(location.search)\n        if (query.has(\"reset\")) {\n            props.questionnaire.reset()\n        }\n\n        let questionIndex=query.get(\"question\")||1\n        let currentQuestion=props.questionnaire.switchToQuestion(questionIndex-1);\n        return {\n            text: currentQuestion.questionText(),\n            type: currentQuestion.type(),\n            number: currentQuestion.currentQuestionNumber(),\n            description: currentQuestion.description(),\n            answers: currentQuestion.answers(),\n            givenAnswerIndex: currentQuestion.givenAnswerIndex(),\n            isTheLastQuestion: props.questionnaire.isTheLastQuestion(),\n            nextQuestionIndex: currentQuestion.currentQuestionNumber()+1\n        }\n    }\n\n    const [question, setQuestion]= useState(createState())\n\n    React.useEffect(() => {\n        setQuestion(createState())\n    }, [location]);\n\n    const handleAnswerChange = (event) => {\n        props.questionnaire.currentQuestion().giveAnswer(event.target.value)\n        setQuestion({...question, givenAnswerIndex: event.target.value})\n        // console.log(\"score: \"+props.questionnaire.score())\n        props.onScoreUpdated()\n    };\n\n    const handleAnswerCheckBoxChange= (event)=> {\n        let answersCopy= question.givenAnswerIndex.slice()\n        answersCopy[event.target.name]= event.target.checked\n        setQuestion({\n            ...question,\n            givenAnswerIndex: answersCopy\n        })\n        props.questionnaire.currentQuestion().giveAnswer(answersCopy)\n        // console.log(\"score: \"+props.questionnaire.score())\n        props.onScoreUpdated()\n    }\n\n\n    return (\n        <>\n            <Grid item>\n                <QuestionBox\n                    text={question.text}\n                    currentIndex={question.number}\n                    totalQuestions={props.questionnaire.totalQuestions()}\n                />\n            </Grid>\n\n            <Grid item>\n                {question.type === \"single\" ? (\n                    <SingleAnswerGroup\n                        onChange={handleAnswerChange}\n                        answers={question.answers}\n                        currentAnswerIndex={question.givenAnswerIndex}\n                    />\n                ) : (\n                    <MultiAnswerGroup\n                        onChange={handleAnswerCheckBoxChange}\n                        answers={question.answers}\n                        currentAnswer={question.givenAnswerIndex}\n                    />\n                )\n                }\n            </Grid>\n\n            <Grid item>\n                {question.givenAnswerIndex !== null? (\n                    <DescriptionBox description={question.description}/>\n                ) : (<></>)\n                }\n            </Grid>\n\n            <Grid item>\n                {question.givenAnswerIndex !== null ? (\n                    !props.questionnaire.isTheLastQuestion() ? (\n                        <Button\n                            variant=\"outlined\"\n                            color=\"primary\"\n                            href={'#/quizz?question='+ question.nextQuestionIndex}\n                        >Следующий\n                            вопрос</Button>\n                    ) : (\n                        <Button variant=\"outlined\" color=\"primary\" href=\"#/score\">Результаты</Button>\n                    )\n                ) : (<></>)\n                }\n            </Grid>\n        </>\n    );\n}\n","import React from 'react';\nimport {Button} from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\n\nexport default function IntroPage() {\n\n    return (\n        <>\n            <Grid item>\n                <Typography variant=\"subtitle1\" gutterBottom>\n                    StringConcat тест\n                </Typography>\n                <Typography variant=\"h3\" gutterBottom>\n                    17 вопросов для оценки кровавости энтерпрайза\n                </Typography>\n            </Grid>\n\n            <Grid item>\n                <Typography variant=\"body1\" gutterBottom>\n                    <p>\n                        Мы составили тест, который поможет вам дистанционно оценить глубину кроличьей норы.\n                        Пройдите сами, чтобы проверить текущую команду, или отправьте потенциальному работодателю.\n                    </p>\n                    <p>\n                        Тест вдохновлён <a href=\"https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/\"> опросником Джоэля Спольски\n                        </a>, который придумал StackOverflow. Опроснику уже двадцать лет,\n                        так что мы его немного расширили и доработали.\n                    </p>\n                </Typography>\n            </Grid>\n\n            <Grid item>\n                <Button variant=\"outlined\" color=\"primary\" href=\"#/quiz\">Начать</Button>\n            </Grid>\n        </>\n    );\n}\n","import React from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport StepContent from '@material-ui/core/StepContent';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles((theme) => ({\n    stepper: {\n        flexDirection: 'column-reverse'\n    },\n}));\n\nfunction getSteps() {\n    return [\n        {\n            min: -10,\n            max: 6,\n            label: {\n                score: '< 7',\n                team: 'Бежать',\n                description: 'Если компания небольшая и вы уверены в своих силах реформатора, можно попробовать.'\n\n            },\n        },\n        {\n            min: 7,\n            max: 12,\n            label: {\n                score: '7–12',\n                team: 'Проблемная команда',\n                description: 'Важно понять, входят ли проблемы в вашу зону ответственности. Если не входят, просить выше среднего по рынку. Если вы сможете повлиять на проблемы и понравился коллектив, можно пробовать.'\n            },\n        },\n        {\n            min: 13,\n            max: 17,\n            label: {\n                score: '13–17',\n                team: 'Хорошая команда',\n                description: 'Комфортные условия, возможность чему-то научиться и привнести своего.'\n            },\n        },\n        {\n            min: 18,\n            max: 24,\n            label: {\n                score: '18–24',\n                team: 'Очень хорошая команда',\n                description: 'Стоит рассматривать, даже если предлагают чуть ниже рынка.'\n            },\n        },\n        {\n            min: 25,\n            max: 40,\n            label: {\n                score: '> 25',\n                team: 'Элита',\n                description: 'Можно смело устраиваться. Если не наврали, работать будет комфортно.'\n            },\n        },\n    ]\n}\n\nexport default function ScoreStepper(props) {\n    const classes = useStyles();\n    const steps = getSteps()\n\n    const scoreInRange = (score, step) => step.min <= score && score <= step.max;\n\n    return (\n        <div className={classes.root}>\n            <Stepper className={classes.stepper} orientation=\"vertical\">\n\n                {steps.map((step, index) => (\n                    <Step key={step.label.score} expanded={true} active={scoreInRange(props.score, step)}>\n                        <StepLabel>{step.label.score} <b>{step.label.team}</b></StepLabel>\n                        <StepContent>\n                            <Typography>{step.label.description}</Typography>\n                        </StepContent>\n                    </Step>\n                ))}\n            </Stepper>\n        </div>\n    );\n}","import React from 'react';\nimport {Button} from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport ScoreStepper from '../quiz/ScoreStepper';\n\nexport default function ScorePage(props) {\n\n    return (\n        <>\n            <Grid item>\n                <Typography variant=\"subtitle1\" gutterBottom>\n                    Результаты\n                </Typography>\n                <Typography variant=\"h3\" gutterBottom>\n                    Вы набрали {props.score} из {props.maximum}\n                </Typography>\n            </Grid>\n\n            <Grid item>\n                <ScoreStepper score={props.score}/>\n            </Grid>\n\n            <Grid item>\n                <Typography variant=\"body1\" gutterBottom>\n                    Мотивация\n                </Typography>\n            </Grid>\n\n            <Grid item container spacing={3}>\n                <Grid item xs={12} md={6}>\n                    <Button variant=\"outlined\" color=\"primary\" href=\"https://howto.stringconcat.com/\">Узнать как перейти\n                        на следующую ступень</Button>\n                </Grid>\n                <Grid item xs={12} md={6}>\n                    <Button variant=\"outlined\" href='#/quiz?reset'>Пройти тест заново</Button>\n                </Grid>\n            </Grid>\n        </>\n    );\n}\n","export default class Question {\n\n    _struct\n    _givenAnswerIndex=null\n    questionIndex\n\n    constructor(questionStructure, questionIndex) {\n        this._struct = questionStructure\n        this.questionIndex = questionIndex\n    }\n\n    questionText = () => {\n        return this._struct.questionText\n    }\n\n    type= ()=> {\n        return this._struct.type\n    }\n\n    description = () => {\n        return this._struct.description\n    }\n\n    giveAnswer = (index) => {\n        this._givenAnswerIndex = index\n    }\n\n    givenAnswerIndex= ()=>  {\n        return this._givenAnswerIndex\n    }\n\n    answerHasBeenGiven= this._givenAnswerIndex !== null\n\n    score = () => {\n        if (this._givenAnswerIndex === null) return 0\n        return this._struct['answerOptions'][this._givenAnswerIndex].score\n    }\n\n    currentQuestionNumber = () => this.questionIndex + 1\n\n    answers = () =>\n        this._struct.answerOptions\n            .map(answer => ({\n                answerText: answer.answerText,\n                correct: answer.score > 0\n            }))\n\n    resetAnswer=()=>{\n        this._givenAnswerIndex=null;\n    }\n}","export default class MultiQuestion {\n\n    _struct\n    _givenAnswerIndex=[false, false, false, false]\n    questionIndex\n\n    constructor(questionStructure, questionIndex) {\n        this._struct = questionStructure\n        this.questionIndex = questionIndex\n    }\n\n    questionText = () => {\n        return this._struct.questionText\n    }\n\n    type= ()=> {\n        return this._struct.type\n    }\n\n    description = () => {\n        return this._struct.description\n    }\n\n    giveAnswer = (index) => {\n        this._givenAnswerIndex=index\n    }\n\n    givenAnswerIndex= ()=>  {\n        return this._givenAnswerIndex\n    }\n\n    answerHasBeenGiven= this._givenAnswerIndex !== null\n\n    score = () => {\n        if (this._givenAnswerIndex === null) return 0\n\n        return this._struct['answerOptions']\n            .map((answerOption, index) => this._givenAnswerIndex[index]===true? answerOption.score:0)\n            .reduce((a, b)=> a+b)\n    }\n\n    currentQuestionNumber = () => this.questionIndex + 1\n\n    answers = () =>\n        this._struct.answerOptions\n            .map(answer => ({\n                answerText: answer.answerText,\n                correct: answer.score > 0\n            }))\n\n    resetAnswer=()=>{\n        this._givenAnswerIndex=[false, false, false, false];\n    }\n}","import Question from \"./Question\";\nimport MultiQuestion from \"./MultiQuestion\";\nimport {questions} from \"../Questions\";\n\nexport default class Questionnaire {\n\n    _currentQuestionIndex = 0\n    questions = []\n\n    constructor(questionnaireStruct) {\n        this.questions = questionnaireStruct\n            .map((question, index) => this.createQuestion(question, index))\n    }\n\n    createQuestion=(question, index)=> {\n        if (question.type === \"single\") {\n            return new Question(question, index)\n        } else {\n            return new MultiQuestion(question, index)\n        }\n    }\n\n    nextQuestion = () => {\n        this._currentQuestionIndex++\n        return this.questions[this._currentQuestionIndex]\n    }\n\n    switchToQuestion(questionIndex) {\n        this._currentQuestionIndex = questionIndex\n        return this.currentQuestion()\n    }\n\n    nextQuestionIndex= ()=> {\n        return this._currentQuestionIndex + 1\n    }\n\n    currentQuestion = () => this.questions[this._currentQuestionIndex]\n\n    totalQuestions= () => this.questions.length\n\n    score = () => this.questions\n        .map(question => question.score())\n        .reduce((a, b) => a+b);\n\n    isTheLastQuestion = () => this._currentQuestionIndex + 1 === this.questions.length;\n\n    reset=()=> {\n        this.questions.forEach(question => question.resetAnswer())\n    }\n}","import React, {useState} from 'react';\nimport {\n\tHashRouter as Router,\n\tRoute,\n\tSwitch,\n\tuseLocation\n} from \"react-router-dom\";\nimport Grid from '@material-ui/core/Grid';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Footer from './layout/Footer';\nimport QuizzPage from './pages/QuizPage';\nimport IntroPage from './pages/IntroPage';\nimport ScorePage from './pages/ScorePage';\nimport Questionnaire from \"./questionnaire/Questionnaire\";\nimport {questions} from \"./Questions\";\n\n\nconst useStyles = makeStyles((theme) => ({\n\troot: {\n\t  display: 'flex',\n\t  flexDirection: 'column',\n\t  minHeight: '100vh',\n\t},\n\tmain: {\n\t  marginTop: theme.spacing(8),\n\t  marginBottom: theme.spacing(2),\n\t},\n  }));\n\nconst questionList = new Questionnaire(questions)\n\nexport default function App() {\n\n\tconst classes = useStyles();\n\n\tconst [score, setScore]=useState();\n\n\tconst onScoreUpdated=()=> {\n\t\tlet newScore=questionList.score();\n\t\tconsole.log(\"score: \"+newScore)\n\t\tsetScore(newScore)\n\t}\n\n\treturn (\n\t\t<div className={classes.root}>\n\t\t\t<CssBaseline />\n\t\t\t<Container component=\"main\" className={classes.main} maxWidth=\"md\">\n\t\t\t\t<Grid container spacing={2} direction=\"column\" justifyContent=\"flex-start\" alignItems=\"stretch\">\n\t\t\t\t\t<Router basename={process.env.PUBLIC_URL}>  \n\t\t\t\t\t\t<Switch>\n\t\t\t\t\t\t\t<Route path=\"/quiz*\">\n\t\t\t\t\t\t\t\t<QuizzPage questionnaire={questionList} onScoreUpdated={onScoreUpdated} />\n\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t<Route path=\"/score\">\n\t\t\t\t\t\t\t\t<ScorePage score={score} maximum={34}/>\n\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t<Route exactPath=\"/\">\n\t\t\t\t\t\t\t\t<IntroPage />\n\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t</Switch>\n\t\t\t\t\t</Router>\n\t\t\t\t</Grid>\n\t\t\t</Container>\n\t\t<Footer/>\n\t  </div>\n\t);\n}\n","export const questions = [\n    {\n        questionText: 'Как команда собирает требования?',\n        type: 'single',\n        answerOptions: [\n            { \n                answerText: 'Применяем водопадную модель. Аналитики анализируют весь проект наперед ', \n                score: -1\n            },\n            { \n                answerText: 'Аналитики со стейкхолдерами — клиентами и бизнесом — прорабатывают требования на 2–3 спринта, формализуют их в ТЗ и отдают разработчикам', \n                score: 2\n            },\n            { \n                answerText: 'Аналитики запираются в комнате без окон, прорабатывают требования на 2–3 спринта и кидают в разработчиков ТЗ', \n                score: 0 \n            },\n            { \n                answerText: 'Аналитики и разработчики сообща работают в спринте над реализацией. Постановки не высечены в камне и изменяются после обсуждения с инженерами', \n                score: 2 \n            },\n        ],\n        description: `\n        <p>В первую очередь проверьте компанию на водопадность.</p>\n        <p>\n            Даже самая распоследняя водопадная компания вам ни за что не скажет, что работает по водопаду. \n            Сейчас весь мир agile. Но есть пропасть между <i>be agile</i> и <i>do agile</i>. И только в <i>be agile</i> командах \n            у вас может появиться возможность комфортно писать качественный софт и влиять на решения, а не просто реализовывать ТЗ.\n        </p>    \n        <p>\n            Для <i>be agile</i> команде нужна ранняя обратная связь от пользователей. \n            Только это позволяет решать реальные проблемы и развивать продукт. \n            Для этого нужно, чтобы аналитики поговорили с живыми людьми, \n            а ещё лучше провели А/Б тестирование прототипов пользовательского интерфейса.\n        </p>`\n            \n    },\n    {\n        questionText: 'Как прорабатываются задачи перед уходом в разработку?',\n        type: 'single',\n        answerOptions: [\n            { answerText: 'Задачи обсуждаются с Dev, QA или BA', score: 2 },\n            { answerText: 'Зачем их прорабатывать, взял и сделал', score: 0 }\n        ],\n        description: `\n            <p>\n                Ответ на этот вопрос помогает понять, используется ли на проекте true agile процесс и shift-left quality approach.\n            </p>\n            <p>\n                В <i>do agile</i> командах вы никогда не встретите BE, Dev и QA, работающих над одной задачей и даже в одном спринте. \n                Но это одно из  основополагающих отличий. \n            </p>\n            <p>\n                BA не должны писать постановки про запас, а после кидать их в разработчиков с дежурным отговоркой «читай, там всё написано».\n                QA должны подключаться уже на этапе проработки требований и обдумывать задачу с точки зрения edge-кейсов.\n            </p>\n            <p>\n                В итоге команда не пишет код, пока не рассмотрит задачу с точек зрения бизнеса, возможностей разработки, качества и безопасности. И каждый из участников будет иметь равный голос и право на разумное «нет». \n            </p>\n            <p>\n                Если вы нашли команду, в которой каждая задача обсуждается тремя амиго — будьте уверены, с agile там всё в порядке.\n            </p>\n        `\n    },\n    {\n        questionText: 'Как фиксируются принятые архитектурные решения',\n        type: 'single',\n        answerOptions: [\n            { answerText: 'В Architectural Decision Record фиксируются все «Почему» ', score: 2 },\n            { answerText: 'В таск-трекере заводят задачи, в которых расписаны все «Как». Например, прикрутить kafka', score: 0 },\n            { answerText: 'Решения не фиксируются', score: 0 },\n        ],\n        description: `\n        <p>\n            Плохо дело, когда команда не может вспомнить, почему выбрали MongoDB или куда-то натыкали микросервисов. \n            ак «исторически сложилось» или тимлид принёс с последней high-load конференции, но суть в том, что никто не вспомнит, \n            на основании чего принимались решения.\n        </p>\n        <p>\n            Без понимания причин команда обречена ходить по кругу, как в кино про день сурка. \n            Монолит → распределенная структура  → монолит, и так, пока все не выгорят.\n        </p>\n        <p>\n            Зрелые команды ведут Architectural Decision Records, в которых фиксируют значимые архитектурные решения, \n            их причины, альтернативы, плюсы и минусы.\n        </p>\n        <p>\n            Таски в Jira для этого плохо подходят. В них редко записывают результат исследования и причины изменений. \n            А сами таски часто теряются. Попробуйте найти задачу, закрытую два года назад.\n        </p>`\n    },\n    {\n        questionText: 'Можно ли начать полноценно разрабатывать в первый же рабочий день?',\n        type: 'single',\n        answerOptions: [\n            { answerText: 'Да, команда выдаст доступы, можно тут же развернуть и запустить проект ', score: 2 },\n            { answerText: 'Нет, весь первый день уйдёт на бумажки и получение доступов', score: 0 },\n        ],\n        description: `\n        <p>\n            Вопрос помогает оценить степень бюрократии на проекте и производственную культуру. \n        </p>\n        <p>\n            Если заведение всех нужных учёток занимает недели, представьте, что там у них с другими процессами.\n        </p>\n        <p>\n            Скорость и простота развертывания тоже много вам скажут.\n        </p>\n        <p>\n            Например, тимлид хвастается, что у них такой большой и важный проект, что его нельзя просто так взять и развернуть. \n            У новичка на это уходит три дня, а у гениального новичка — всего два.\n        </p>\n        <p>\n            Но три дня на развертывание говорят только о том, что тимлид не понимает своей основной задачи — упрощать работу разработчиков.\n        </p>\n        <p>\n            Любой проект должен собираться и запускаться по одной команде. \n            Если вместо кнопки длинный readme по запуску, поздравляю, вы нашли зону роста. Конвертируйте readme в bash-скрипт.\n        </p>`\n    },\n    {\n        questionText: 'Получится ли комфортно работать с личного ноута на необитаемом острове, где есть только 3G',\n        type: 'single',\n        answerOptions: [\n            { answerText: 'Да, но, возможно, первый билд пройдёт немного болезненно', score: 2 },\n            { answerText: 'В принципе да, но будут проблемы', score: 1 },\n            { answerText: 'Нет, какой ноут, какой остров?', score: 0 },\n        ],\n        description: `\n        <p>\n            Даже если вы не собираетесь работать под пальмой в Таиланде, хорошо бы понимать, \n            сколько телодвижений необходимо для начала работы. А именно:\n            <ul>\n                <li>сколько всякого рода VPNов надо подключить, чтобы добраться до репозитория или продакшена</li>\n                <li>доступны ли трекеры задач, хранилища артефактов и прочая инфраструктура извне</li>\n                <li>сможете ли вы достучаться до DEV-кластера не из сети компании. Или вы вообще не сможете собрать билд, потому что кто-то включил обращения к тестовому серверу в unit-тесты.</li>\n            </ul>\n        </p>\n        <p>\n            Из всего этого безобразия складывается удобство работы.\n        </p>`\n    },\n    {\n        questionText: 'Можно ли локально запустить кластер, состоящий из большинства разрабатываемых приложений и прогнать на нём e2e-тесты',\n        type: 'single',\n        answerOptions: [\n            { answerText: 'Он запускается одной кнопкой (одним bash-скриптом) ', score: 2 },\n            { answerText: 'Можно, но нужно стартовать и настраивать каждое приложение', score: 1 },\n            { answerText: 'Звучит сложно, ни разу не пробовали', score: 0 },\n        ],\n        description: `\n        <p>\n            Правило хорошего тона: весь кластер можно запускать локально и натравливать e2e-тесты. \n        </p>\n        <p>\n            Это значительно упрощает жизнь при фиксе багов, настройке CI и тестировании фич.\n        </p>\n        <p>\n            Для первоначальной настройки CI потребуются ровно те же действия, что и для локального запуска. Удаленный кластер не придётся настраивать, если работает локально — заработает и на CI-сервере.\n        </p>\n        <p>\n        Представьте, что новая фича пронизывает несколько микросервисов. Вы разрабатываете на одном, пушите код в мастер, чтобы он появился на стенде, переключаетесь на другой микросервис, конектитесь к первому на только что разработанный endpoint и находите в нём ошибку. \n        Переключаетесь на первый, пушите в репозиторий, проходите код ревью, мержите в мастер. С локальным запуском можно сразу развернуть кластер и тестировать такую фичу end-to-end.\n        </p>`\n    },\n    {\n        questionText: 'Как быстро коммит по рядовой задаче окажется на Проде?',\n        type: 'single',\n        answerOptions: [\n            { answerText: 'К концу дня', score: 2 },\n            { answerText: 'К концу итерации ', score: 1 },\n            { answerText: 'Это решит бизнес, гадая на курице с отрубленной головой', score: 0 },\n        ],\n        description: `\n        <p>\n            Этот вопрос перекликается с Lean принципом. Если мы говорим о разработке качественного и надежного ПО, \n            то чем быстрее вы выкатываете обновление на production и чем чаще вы это можете делать, темраньше вы получите \n            feedback от пользователей, тем быстрее проверите идеи, да и просто сможете быстрее пофиксить баг.\n        </p>\n        <p>\n            В итоге, самый надежный софт - не тот, где для обновления продакшен стенда требуется собрать 5 подписей \n            и пройти 7 кургов ада приемочных тестов, а тот который может быть задеплоин быстро и автоматически. \n            Конечно же с прохождением автоматических тестов.\n        </p>`\n    },\n    {\n        questionText: 'Что можно пропустить, когда дедлайн уже близок',\n        type: 'single',\n        answerOptions: [\n            { answerText: 'Написание Unit-тестов', score: 0 },\n            { answerText: 'Написание e2e-тестов ', score: 0 },\n            { answerText: 'Отложить задачи из технического беклога', score: 0 },\n            { answerText: 'Ничего из вышеперечисленного', score: 2 },\n        ],\n        description: `\n        <p>\n            Дедлайн показывает, во что человек верит по-настоящему. Мы используем различные практики, чтобы снижать стоимость, \n            расход нервов и время разработки. Отказ от практик говорит о дефиците веры в их эффективность.\n        </p>`\n    },\n    {\n        questionText: 'Как прорабатывается графический интерфейс приложения?',\n        type: 'single',\n        answerOptions: [\n            { answerText: 'Над ним работает UX-дизайнер, имплементируют разработчики', score: 2 },\n            { answerText: 'Фронтенд-разработчики раскидывают кнопки и инпуты, получается ок ', score: 0 },\n        ],\n        description: `\n        <p>\n            Интерфейс Jenkins — отличный пример того, что получается у разработчиков без участия UX-дизайнера. \n            Гоните прочь мысль, что верстальщик раскидает кнопочки, а пользователь уж как-нибудь разберётся.\n        </p>\n        <p>\n            Грамотный UX дизайнер сделает интерфейс человекочитаемым. \n            Проработает архитектуру информации, чтобы пользователь легко находил нужное. Проследит за единообразием стиля, ч\n            тобы дружелюбное приветствие на главной совпадало по тону с сообщениями об ошибках. \n            Проверит дизайн на пользователях и внесет доработки по результатам этих тестов. Верстальщик так не сможет.\n        </p>\n        <p>\n            Если пользователю не комфортно работать с приложением, неважно, сколько килореквестов в секунду оно обрабатывает.\n        </p>`\n    },\n    {\n        questionText: 'Как точнее всего описывается архитектура проекта?',\n        type: 'single',\n        answerOptions: [\n            { answerText: 'Через инструменты. Например, «REST сервисы на Spring Boot, на беке у нас hibernate c PostgreSQL»', score: 0 },\n            { answerText: 'Через контексты бизнеса и модули. Например, «сервис с распределенной архитектурой и асинхронной обработкой сообщений, поскольку разные пользователи и сценарии чувствительны к разным архитектурным характеристикам» ', score: 2 },\n        ],\n        description: `\n        <p>\n            Архитектура — расплывчатое понятие и описывают её как угодно, от инфраструктуры до организации бизнес-процессов. \n            Важно понять, что преобладает в голове у её авторов: выбранные инструменты или причины выбора этих инструментов. \n            Хорошо, когда причины преобладают.\n        </p>\n        <p>\n            Например, можно ли понять, почему выбрали новомодную Кафку? \n            Она действительно нужна или она переваривает по 5 сообщений в день просто потому, что техлид принес её с последней конференции.\n        </p>`\n    },\n    {\n        questionText: 'Работа с техническим долгом',\n        type: 'single',\n        answerOptions: [\n            { answerText: 'Бэклог приоритезирован, пополняется ежедневно. Технический долг считается first class citizens ', score: 2 },\n            { answerText: 'Задачами из технического бэклога занимаются после задач бизнеса, когда в спринте остаются пустые места', score: 1 },\n            { answerText: 'Технический бэклог не ведется', score: 0 },\n        ],\n        description: `\n        <p>\n            Здоровые команды профессионалов часто не делят бэклог на технический долг и фичи, а осознают их важность для продукта в конкретной ситуации. \n            В такой команде PM будет настаивать на закрытии техдолга, а разработчики — на внедрении фич, особенно если они сами пользуются своим продуктом.\n        </p>`\n    },\n    {\n        questionText: 'Насколько здорова пирамида тестирования?',\n        type: 'single',\n        answerOptions: [\n            { answerText: 'Образцовая. Обширная база unit-тестов, применение TDD, интеграционных тестов, e2e и немного behavior-тестов', score: 2 },\n            { answerText: 'Песочные часы. Много Unit, много behavior-тестов, которые написаны QA, а в середине почти пусто', score: 1 },\n            { answerText: 'Сложно сказать', score: 0 },\n            { answerText: 'Стартапу тесты ни к чему, главное — рост и захват рынка!', score: 0 },\n        ],\n        description: `\n        <p>\n            Здоровая пирамида тестирования снижает потери нервных клеток при деплое и позволяет перейти к continuous deployment при необходимости.\n        </p>\n        <p>\n            Отсутствие тестов — явный признак ручного «приемочного тестирования» и ежемесячной релизной лихорадки, \n            когда кто-то задорно мержит в уже протестированное, и прочее дно кровавого энтерпрайза.\n        </p>`\n    },\n    {\n        questionText: 'Чем занимаются тестировщики?',\n        type: 'single',\n        answerOptions: [\n            { answerText: 'Анализируют задачи перед принятием в работу, находят в задаче edge cases ещё до начала разработки, могут разрабатывать наравне с программистами', score: 2 },\n            { answerText: 'Ручным тестированием перед релизом', score: 0 },\n            { answerText: 'Автоматизированным тестированием, покрывают функции приложения e2e-тестами', score: 0 },\n            { answerText: 'В команде нет тестировщиков', score: 1 },\n        ],\n        description: `\n        <p>\n            Отлично, если QA могут разрабатывать совместно с программистом. \n            Совсем отлично, когда QA — не должность, а роль, которую попеременно выполняют члены команды или берут на себя особо ответственные. \n            В таких командах может не быть формального QA.\n        </p>\n        <p>\n            Антипаттерн — тестировщики занимаются «приемочным тестированием»: присоединяются к задаче в конце и начинают её возвращать на доработку. \n            В худшем случае задача переделывается целиком.\n        </p>\n        <p>\n            В промежуточном варианте тестировщики могут похвастаться, что написали 100 автотестов и покрыли 25 % функций, \n            осталось написать ещё 300. Это говорит о двух вариантах:\n            <ul>\n                <li>Разработчики пишут unit-тесты и вместо пирамиды тестирования у них песочные часы.</li>\n                <li>Разработчики тестов не пишут и у них перевернутая пирамида.</li>\n            </ul>\n        </p>\n        <p>\n            В любом случае есть вероятность, что тестировщики в своих BDD-тестах ощутимо далеки от тестов, написанных разработчиками. \n            Это значит, что тесты QA будут хрупкими и тяжелыми. Изменится вёрстка, добрая половина тестов отвалится и их буду чинить весь спринт.\n        </p>\n        `\n    },\n    {\n        questionText: 'При каких условиях свалится локальный билд?',\n        type: 'multi',\n        answerOptions: [\n            { answerText: 'Зафейлился один из тестов', score: 0.5 },\n            { answerText: 'Неиспользуемый импорт', score: 0.5 },\n            { answerText: 'Код не соответствует стандарту кодирования', score: 0.5 },\n            { answerText: 'Есть потенциальный баг', score: 0.5 },\n        ],\n        description: `\n        <p>\n            Локальный билд обязан валиться при сломанном тесте, жалобах линтеров на потенциальные ошибки в коде или на стиль кодирования.\n        </p>\n        <p>\n            Мы говорим именно о локальном билде, а не о CI-pipeline из-за shift-left подхода. Жалобу локального сборщика проще заметить и принять меры. \n            Если же что-то отвалится на CI, вы заметите это лет через десять, когда весь контекст будет утерян.\n        </p>`\n    },\n    {\n        questionText: 'Используется ли TDD?',\n        type: 'single',\n        answerOptions: [\n            { answerText: 'Да, продакшн-код пишется после тестов для него. На написание теста уходит 2–3 минуты', score: 2 },\n            { answerText: 'Покрытие тестами идёт отдельной задачей ', score: 0 },\n            { answerText: 'Нет', score: 0 },\n        ],\n        description: `\n        <p>\n            Наличие одних unit-тестов не гарантирует безошибочную работу приложения. \n            Важен не инструмент, а процесс. Если при сборке приложения отваливается один из тестов — приложение однозначно сломано. \n            Но с зелёной полосой нет никакой гарантии, что ошибок нет. С TDD всё однозначно: красная полоса — фиксим, зеленая — выкатываем на прод. \n        </p>`\n    },\n    {\n        questionText: 'Сколько часов команда переработала за последний месяц?',\n        type: 'single',\n        answerOptions: [\n            { answerText: 'Никаких переработок', score: 2 },\n            { answerText: 'Пришлось немного поднапрячься к концу проекта', score: 0 },\n            { answerText: 'Переработки в норме и поощряются', score: 0 },\n        ],\n        description: `\n        <p>\n            IT-сообщество регулярно развлекается научным обоснованием неизбежности и необходимости переработок. Но переработки имеют три простые причины:\n        </p>\n        <p>\n            <b>Проект изначально не помещался в бюджет.</b> \n            Условно, по оценке нужно полтора года, но у заказчика денег только на год. \n            Часто менеджеры решают влезть в деньги за счёт ускорения разработки и неизбежного кранча перед дедлайном. \n        </p>\n        <p>\n            <b>Проект неправильно оценили и он сильно затягивается.</b> \n            Разработчиков это волновать не должно, но закрывать брешь придётся им.\n        </p>\n        <p>\n            <b>В компании такая традиция.</b>\n            Авторам встречались команды, настолько привыкшие перерабатывать, что сидят по вечерам и выходным без особой необходимости. \n            Сами сидят и осуждают новичков, которые пытаются уйти после шести вечера.\n        </p>\n        <p>\n            Если проекту не хватает времени, денег или производственной культуры, \n            то недостающее всегда покрывается ресурсом разработчиков: их личным временем, здоровьем и нервами.\n        </p>\n        `\n    },\n    {\n        questionText: 'Как команда узнает о проблемах на проде?',\n        type: 'single',\n        answerOptions: [\n            { answerText: 'От менеджера, который прочитал о падении сервиса в твиттере конкурентов', score: 0 },\n            { answerText: 'Из мониторинга, задолго до того, как основная часть пользователей что-то заметит ', score: 2 },\n        ],\n        description: `\n        <p>\n            Без нормального логирования и мониторинга разработчики обречены копаться в логах прода. \n            При этом мониторинг должен отображать и состояние систем, с которыми интегрирован сервис.\n             Иначе можно провести час по пояс в логах и с наскипидаренным менеджером за спиной, \n             чтобы понять, что лежит не сам сервис, а биллинг партнёров.\n        </p>`\n    },\n];","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}