{"version":3,"sources":["Footer.js","Questions.js","DescriptionBox.js","QuestionBox.js","AnswersGroup.js","QuizPage.js","IntroPage.js","ScorePage.js","App.js","index.js"],"names":["Copyright","Typography","variant","color","Link","href","Date","getFullYear","useStyles","makeStyles","theme","footer","padding","spacing","marginTop","backgroundColor","palette","type","grey","Footer","classes","className","Container","maxWidth","questions","questionText","answerOptions","answerText","score","description","DescriptionBox","props","Card","CardContent","gutterBottom","QuestionBox","currentIndex","totalQuestions","text","AnswersGroup","FormControl","component","RadioGroup","aria-label","name","value","currentAnswerIndex","onChange","answers","map","answerOption","index","FormControlLabel","toString","control","Radio","label","QuizzPage","useState","currentQuestion","setCurrentQuestion","setScore","setCurrentAnswerIndex","Grid","item","length","event","target","Button","onClick","scoreFortheAnswer","currentAnswerScore","newScore","updateScore","nextQeustion","handleNextQuestionButton","IntroPage","ScorePage","maximum","root","display","flexDirection","minHeight","main","marginBottom","App","CssBaseline","container","direction","justifyContent","alignItems","basename","process","path","exactPath","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ed3f28d8.chunk.js","sourcesContent":["import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Link from '@material-ui/core/Link';\nimport Container from '@material-ui/core/Container';\nimport { makeStyles } from '@material-ui/core/styles';\n\nfunction Copyright() {\n\treturn (\n\t  <Typography variant=\"body2\" color=\"textSecondary\">\n\t\t{'Copyright © '}\n\t\t<Link color=\"inherit\" href=\"https://howto.stringconcat.com/\">\n\t\t  StringConcat\n\t\t</Link>{' '}\n\t\t{new Date().getFullYear()}\n\t\t{'.'}\n\t  </Typography>\n\t);\n  }  \n\n  const useStyles = makeStyles((theme) => ({\n\tfooter: {\n\t  padding: theme.spacing(3, 2),\n\t  marginTop: 'auto',\n\t  backgroundColor:\n\t\ttheme.palette.type === 'light' ? theme.palette.grey[200] : theme.palette.grey[800],\n\t},\n  }));\n\n  export default function Footer() {\n\n\tconst classes = useStyles();\n\n\treturn (\n\t\t<footer className={classes.footer}>\n\t\t<Container maxWidth=\"md\">\n\t\t  <Typography variant=\"body1\">Сделано с любовью</Typography>\n\t\t  <Copyright />\n\t\t</Container>\n\t  </footer>  \n\t)\n  }\n","export const questions = [\n    {\n        questionText: 'Как команда собирает требования?',\n        answerOptions: [\n            { \n                answerText: 'Применяем водопадную модель. Аналитики анализируют весь проект наперед ', \n                score: -1\n            },\n            { \n                answerText: 'Аналитики со стейкхолдерами — клиентами и бизнесом — прорабатывают требования на 2–3 спринта, формализуют их в ТЗ и отдают разработчикам', \n                score: 2\n            },\n            { \n                answerText: 'Аналитики запираются в комнате без окон, прорабатывают требования на 2–3 спринта и кидают в разработчиков ТЗ', \n                score: 0 \n            },\n            { \n                answerText: 'Аналитики и разработчики сообща работают в спринте над реализацией. Постановки не высечены в камне и изменяются после обсуждения с инженерами', \n                score: 2 \n            },\n        ],\n        description: `В первую очередь проверьте компанию на водопадность.\n        Даже самая распоследняя водопадная компания вам ни за что не скажет, что работает по водопаду. Сейчас весь мир agile. Но есть пропасть между be agile и do agile. И только в be agile командах у вас может появиться возможность комфортно писать качественный софт и влиять на решения, а не просто реализовывать ТЗ.\n        Для be agile команде нужна ранняя обратная связь от пользователей. Только это позволяет решать реальные проблемы и развивать продукт. Для этого нужно, чтобы аналитики поговорили с живыми людьми, а ещё лучше провели А/Б тестирование прототипов пользовательского интерфейса.`\n    },\n    {\n        questionText: 'Как прорабатываются задачи перед уходом в разработку?',\n        answerOptions: [\n            { answerText: 'Задачи обсуждаются с Dev, QA или BA', score: 2 },\n            { answerText: 'Зачем их прорабатывать, взял и сделал', score: 0 }\n        ],\n        description: `Ответ на этот вопрос помогает понять, используется ли на проекте true agile процесс и shift-left quality approach.  \n        В do agile командах вы никогда не встретите BE, Dev и QA, работающих над одной задачей и даже в одном спринте. Но это одно из  основополагающих отличий. \n        BA не должны писать постановки про запас, а после кидать их в разработчиков с дежурным отговоркой «читай, там всё написано». QA должны подключаться уже на этапе проработки требований и обдумывать задачу с точки зрения edge-кейсов.\n        В итоге команда не пишет код, пока не рассмотрит задачу с точек зрения бизнеса, возможностей разработки, качества и безопасности. И каждый из участников будет иметь равный голос и право на разумное «нет». \n        Если вы нашли команду, в которой каждая задача обсуждается тремя амиго — будьте уверены, с agile там всё в порядке.\n        `\n    },\n    {\n        questionText: 'Как фиксируются принятые архитектурные решения',\n        answerOptions: [\n            { answerText: 'В Architectural Decision Record фиксируются все «Почему» ', score: 2 },\n            { answerText: 'В таск-трекере заводят задачи, в которых расписаны все «Как». Например, прикрутить kafka', score: 0 },\n            { answerText: 'Решения не фиксируются', score: 0 },\n        ],\n        description: `Плохо дело, когда команда не может вспомнить, почему выбрали MongoDB или куда-то натыкали микросервисов. Так «исторически сложилось» или тимлид принёс с последней high-load конференции, но суть в том, что никто не вспомнит, на основании чего принимались решения.\n        Без понимания причин команда обречена ходить по кругу, как в кино про день сурка. Монолит → распределенная структура  → монолит, и так, пока все не выгорят.\n        Зрелые команды ведут Architectural Decision Records, в которых фиксируют значимые архитектурные решения, их причины, альтернативы, плюсы и минусы.\n        Таски в Jira для этого плохо подходят. В них редко записывают результат исследования и причины изменений. А сами таски часто теряются. Попробуйте найти задачу, закрытую два года назад.\n        `\n    },\n    {\n        questionText: 'Можно ли начать полноценно разрабатывать в первый же рабочий день?',\n        answerOptions: [\n            { answerText: 'Да, команда выдаст доступы, можно тут же развернуть и запустить проект ', score: 2 },\n            { answerText: 'Нет, весь первый день уйдёт на бумажки и получение доступов', score: 0 },\n        ],\n        description: `Вопрос помогает оценить степень бюрократии на проекте и производственную культуру. \n        Если заведение всех нужных учёток занимает недели, представьте, что там у них с другими процессами.\n        Скорость и простота развертывания тоже много вам скажут.\n        Например, тимлид хвастается, что у них такой большой и важный проект, что его нельзя просто так взять и развернуть. У новичка на это уходит три дня, а у гениального новичка — всего два.\n        Но три дня на развертывание говорят только о том, что тимлид не понимает своей основной задачи — упрощать работу разработчиков.\n        Любой проект должен собираться и запускаться по одной команде. Если вместо кнопки длинный readme по запуску, поздравляю, вы нашли зону роста. Конвертируйте readme в bash-скрипт.\n        `\n    },\n];","import React from 'react';\nimport Card from '@material-ui/core/Card';\nimport Typography from '@material-ui/core/Typography';\nimport CardContent from '@material-ui/core/CardContent';\n\nexport default function DescriptionBox(props) {\n\n    return (\n        <Card variant=\"outlined\">\n        <CardContent>\n            <Typography  variant=\"body1\" gutterBottom>\n                {props.description}\n            </Typography>\n        </CardContent>\n        </Card>\t\n    );\n}","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\n\nexport default function QuestionBox(props){\n    return (\n    <>\n        <Typography variant=\"subtitle1\" gutterBottom>\n            Вопрос {props.currentIndex + 1} из {props.totalQuestions}\n        </Typography>\n        <Typography variant=\"h3\" gutterBottom>\n            {props.text}\n        </Typography>\n    </>\n    )\n}","import React from 'react';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\n\nexport default function AnswersGroup(props) {\n\n    return (\n        <FormControl component=\"fieldset\">\n        <RadioGroup aria-label=\"anwers\" name=\"answers\" value={props.currentAnswerIndex} onChange={props.onChange}>\n            {\n                props.answers.map(\n                    (answerOption, index) => \n                        <FormControlLabel \n                            value={index.toString()} \n                            control={<Radio color={answerOption.score>0? \"primary\":\"secondary\"}/>} \n                            label={answerOption.answerText} />\n                    )\n            }\n        </RadioGroup>\n        </FormControl>\n    )\n}","import React, { useState } from 'react';\nimport { Button } from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport { questions } from './Questions';\nimport DescriptionBox from './DescriptionBox';\nimport QuestionBox from './QuestionBox';\nimport AnswersGroup from './AnswersGroup';\n\nexport default function QuizzPage(props) {\n\n\tconst [currentQuestion, setCurrentQuestion] = useState(0);\n\tconst [score, setScore] = useState(0)\n\tconst [currentAnswerIndex, setCurrentAnswerIndex] = useState(-1)\n\n\tconst handleNextQuestionButton = (scoreFortheAnswer) => {\n\t\tconst currentAnswerScore = questions[currentQuestion].answerOptions[currentAnswerIndex].score\n        const newScore = score + currentAnswerScore\n\t\tsetScore(newScore)\n        props.updateScore(newScore)\n\n\t\tconst nextQeustion = currentQuestion + 1;\n\t\tif (nextQeustion < questions.length) {\n\t\t\tsetCurrentQuestion(nextQeustion)\n\t\t}\n\n\t\tsetCurrentAnswerIndex(-1)\n\t}\n\n\n\t  const handleAnswerChange = (event) => {\n\t\tsetCurrentAnswerIndex(event.target.value)\n\t  };\n\n    function isTheLastQuestion() {\n        return currentQuestion + 1 === questions.length\n    }  \n\n\treturn (\n\t\t<>\n\t\t\t<Grid item>\n\t\t\t\t<QuestionBox \n\t\t\t\t\ttext={questions[currentQuestion].questionText}\n\t\t\t\t\tcurrentIndex={currentQuestion}\n\t\t\t\t\ttotalQuestions={questions.length}\n\t\t\t\t/>\n\t\t\t</Grid>\t\n\n\t\t\t<Grid item>\n\t\t\t\t<AnswersGroup \n\t\t\t\t\tonChange={handleAnswerChange}\n\t\t\t\t\tanswers={questions[currentQuestion].answerOptions}\n\t\t\t\t\tcurrentAnswerIndex={currentAnswerIndex}\n\t\t\t\t/>\n\t\t\t</Grid>\t\n\n\t\t\t<Grid item>\n\t\t\t\t{currentAnswerIndex !== -1 ? (\n\t\t\t\t<DescriptionBox description={questions[currentQuestion].description} />\n\t\t\t) : (<></>) \n\t\t\t}\n\t\t\t</Grid>\n\n\t\t\t<Grid item>\n\t\t\t\t{currentAnswerIndex !== -1 ? (\n\t\t\t\t\t!isTheLastQuestion() ? (\n\t\t\t\t\t\t<Button variant=\"outlined\" color=\"primary\" onClick={() => handleNextQuestionButton()}>Следующий вопрос</Button>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<Button variant=\"outlined\" color=\"primary\" href=\"#/score\">Результаты</Button>\n\t\t\t\t\t)\n\t\t\t\t\t) : (<></>) \n\t\t\t\t}\n\t\t\t</Grid>\n\t\t</>\n\t);\n}\n","import React from 'react';\nimport { Button } from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\n\nexport default function IntroPage() {\n\n\treturn (\n\t  <>\n\t\t<Grid item>\n\t\t\t<Typography variant=\"subtitle1\" gutterBottom>\n\t\t\t\tStringConcat тест\n\t\t\t</Typography>\n\t\t\t<Typography variant=\"h3\" gutterBottom>\n\t\t\t\t17 вопросов для оценки кровавости энтерпрайза\n\t\t\t</Typography>\n\t\t\t</Grid>\t\n\n\t\t\t<Grid item>\n\t\t\t\t<Typography variant=\"body\" gutterBottom>\n\t\t\t\t\tМы составили тест, который поможет вам дистанционно оценить глубину кроличьей норы. Пройдите сами, чтобы проверить текущую команду, или отправьте потенциальному работодателю.\n\t\t\t\t\tТест вдохновлён <a href=\"https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/\">опросником Джоэля Спольски</a>, который придумал StackOverflow. Опроснику уже двадцать лет, так что мы его немного расширили и доработали.\n\t\t\t\t</Typography>\n\t\t\t</Grid>\t\n\n\t\t\t<Grid item>\n\t\t\t\t<Button variant=\"outlined\" color=\"primary\" href=\"#/quiz\">Начать</Button>\n\t\t\t</Grid>\n\t\t</>\n\t);\n}\n","import React from 'react';\nimport { Button } from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\nexport default function ScorePage(props) {\n\n\treturn (\n        <>\n            <Grid item>\n                <Typography variant=\"subtitle1\" gutterBottom>\n                    Таки все\n                </Typography>\n                <Typography variant=\"h3\" gutterBottom>\n                    Результаты\n                </Typography>\n            </Grid>\t\n            <Grid item>\n                Вы набрали {props.score} из {props.maximum}\n            </Grid>\n            <Grid item>\n            <>\n                <Typography variant=\"body\" gutterBottom>\n                    <p>\n                        <b>От 25 баллов и выше</b><br/>\n                        Элита. Можно смело устраиваться. Если не наврали, работать будет комфортно.\n                    </p> \n\n                    <p>\n                        <b>18–24 баллов</b><br/>\n                        Очень хорошая команда. Стоит рассматривать, даже если предлагают чуть ниже рынка.\n                    </p>\n\n                    <p>\n                        <b>18–24 баллов</b><br/>\n                        Очень хорошая команда. Стоит рассматривать, даже если предлагают чуть ниже рынка.\n                    </p>\n\n                    \n                    <p>\n                        <b>13–17 баллов</b><br/>\n                        Хорошая команда. Комфортные условия, возможность чему-то научиться и привнести своего.\n                    </p>\n\n\n                    <p>\n                        <b>17–12 баллов</b><br/>\n                        Важно понять, входят ли проблемы в вашу зону ответственности. Если не входят, просить выше среднего по рынку. Если вы сможете повлиять на проблемы и понравился коллектив, можно пробовать.\n                    </p>\n\n                    <p>\n                        <b>Ниже 7 баллов</b><br/>\n                        Бежать.<br/>\n                        Если компания небольшая и вы уверены в своих силах реформатора, можно попробовать.\n                    </p>\n                </Typography>\n                </>\n            </Grid>\t\n\n            <Grid item>\n                <Button variant=\"outlined\" color=\"primary\" href=\"https://howto.stringconcat.com/\">Курс</Button>\n            </Grid>\n        </>\n\n\t);\n}\n","import React, {useState} from 'react';\nimport {\n\tHashRouter as Router,\n\tSwitch,\n\tRoute,\n  } from \"react-router-dom\";\nimport Grid from '@material-ui/core/Grid';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Footer from './Footer';  \n\n\nimport QuizzPage from './QuizPage';\nimport IntroPage from './IntroPage';\nimport ScorePage from './ScorePage';\n\n\nconst useStyles = makeStyles((theme) => ({\n\troot: {\n\t  display: 'flex',\n\t  flexDirection: 'column',\n\t  minHeight: '100vh',\n\t},\n\tmain: {\n\t  marginTop: theme.spacing(8),\n\t  marginBottom: theme.spacing(2),\n\t},\n  }));\n\n\nexport default function App() {\n\n\tconst classes = useStyles();\n\n\tconst [score, setScore] = useState(0)\n\n\treturn (\n\t\t<div className={classes.root}>\n\t\t\t<CssBaseline />\n\t\t\t<Container component=\"main\" className={classes.main} maxWidth=\"md\">\n\t\t\t\t<Grid container spacing=\"3\" direction=\"column\" justifyContent=\"flex-start\" alignItems=\"stretch\">\n\t\t\t\t\t<Router basename={process.env.PUBLIC_URL}>  \n\t\t\t\t\t\t<Switch>\n\t\t\t\t\t\t\t<Route path=\"/quiz\">\n\t\t\t\t\t\t\t<QuizzPage updateScore={setScore} />\n\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t<Route path=\"/score\">\n\t\t\t\t\t\t\t<ScorePage score={score} maximum={32}/>\n\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t<Route exactPath=\"/\">\n\t\t\t\t\t\t\t<IntroPage />\n\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t</Switch>\n\t\t\t\t\t</Router>\n\t\t\t\t</Grid>\n\t\t\t</Container>\n\t\t<Footer/>\n\t  </div>\n\t);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}