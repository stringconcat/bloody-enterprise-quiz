{"version":3,"sources":["layout/Footer.js","Questions.js","quiz/DescriptionBox.js","quiz/QuestionBox.js","quiz/AnswersGroup.js","pages/QuizPage.js","pages/IntroPage.js","pages/ScorePage.js","pages/ScorePage2.js","App.js","index.js"],"names":["Copyright","Typography","variant","color","Link","href","Date","getFullYear","useStyles","makeStyles","theme","footer","padding","spacing","marginTop","backgroundColor","palette","type","grey","Footer","classes","className","Container","maxWidth","questions","questionText","answerOptions","answerText","score","description","DescriptionBox","props","Card","CardContent","gutterBottom","ReactHtmlParser","QuestionBox","currentIndex","totalQuestions","text","AnswersGroup","FormControl","component","RadioGroup","aria-label","name","value","currentAnswerIndex","onChange","answers","map","answerOption","index","FormControlLabel","toString","control","Radio","label","QuizzPage","useState","currentQuestion","setCurrentQuestion","setScore","setCurrentAnswerIndex","Grid","item","length","event","target","Button","onClick","scoreFortheAnswer","currentAnswerScore","newScore","updateScore","nextQeustion","handleNextQuestionButton","IntroPage","ScorePage","maximum","root","width","stepper","flexDirection","button","marginRight","actionsContainer","marginBottom","resetContainer","VerticalLinearStepper","React","steps","team","Stepper","orientation","Step","key","expanded","active","StepLabel","StepContent","step","getStepContent","display","minHeight","main","App","CssBaseline","container","direction","justifyContent","alignItems","basename","process","path","exactPath","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8942ed72.chunk.js","sourcesContent":["import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Link from '@material-ui/core/Link';\nimport Container from '@material-ui/core/Container';\nimport { makeStyles } from '@material-ui/core/styles';\n\nfunction Copyright() {\n\treturn (\n\t  <Typography variant=\"body2\" color=\"textSecondary\">\n\t\t{'Copyright © '}\n\t\t<Link color=\"inherit\" href=\"https://howto.stringconcat.com/\">\n\t\t  StringConcat\n\t\t</Link>{' '}\n\t\t{new Date().getFullYear()}\n\t\t{'.'}\n\t  </Typography>\n\t);\n  }  \n\n  const useStyles = makeStyles((theme) => ({\n\tfooter: {\n\t  padding: theme.spacing(3, 2),\n\t  marginTop: 'auto',\n\t  backgroundColor:\n\t\ttheme.palette.type === 'light' ? theme.palette.grey[200] : theme.palette.grey[800],\n\t},\n  }));\n\n  export default function Footer() {\n\n\tconst classes = useStyles();\n\n\treturn (\n\t\t<footer className={classes.footer}>\n\t\t<Container maxWidth=\"md\">\n\t\t  <Typography variant=\"body1\">Сделано с любовью</Typography>\n\t\t  <Copyright />\n\t\t</Container>\n\t  </footer>  \n\t)\n  }\n","export const questions = [\n    {\n        questionText: 'Как команда собирает требования?',\n        answerOptions: [\n            { \n                answerText: 'Применяем водопадную модель. Аналитики анализируют весь проект наперед ', \n                score: -1\n            },\n            { \n                answerText: 'Аналитики со стейкхолдерами — клиентами и бизнесом — прорабатывают требования на 2–3 спринта, формализуют их в ТЗ и отдают разработчикам', \n                score: 2\n            },\n            { \n                answerText: 'Аналитики запираются в комнате без окон, прорабатывают требования на 2–3 спринта и кидают в разработчиков ТЗ', \n                score: 0 \n            },\n            { \n                answerText: 'Аналитики и разработчики сообща работают в спринте над реализацией. Постановки не высечены в камне и изменяются после обсуждения с инженерами', \n                score: 2 \n            },\n        ],\n        description: `\n        <p>В первую очередь проверьте компанию на водопадность.</p>\n        <p>\n            Даже самая распоследняя водопадная компания вам ни за что не скажет, что работает по водопаду. \n            Сейчас весь мир agile. Но есть пропасть между <i>be agile</i> и <i>do agile</i>. И только в <i>be agile</i> командах \n            у вас может появиться возможность комфортно писать качественный софт и влиять на решения, а не просто реализовывать ТЗ.\n        </p>    \n        <p>\n            Для <i>be agile</i> команде нужна ранняя обратная связь от пользователей. \n            Только это позволяет решать реальные проблемы и развивать продукт. \n            Для этого нужно, чтобы аналитики поговорили с живыми людьми, \n            а ещё лучше провели А/Б тестирование прототипов пользовательского интерфейса.\n        </p>`\n            \n    },\n    {\n        questionText: 'Как прорабатываются задачи перед уходом в разработку?',\n        answerOptions: [\n            { answerText: 'Задачи обсуждаются с Dev, QA или BA', score: 2 },\n            { answerText: 'Зачем их прорабатывать, взял и сделал', score: 0 }\n        ],\n        description: `\n            <p>\n                Ответ на этот вопрос помогает понять, используется ли на проекте true agile процесс и shift-left quality approach.\n            </p>\n            <p>\n                В <i>do agile</i> командах вы никогда не встретите BE, Dev и QA, работающих над одной задачей и даже в одном спринте. \n                Но это одно из  основополагающих отличий. \n            </p>\n            <p>\n                BA не должны писать постановки про запас, а после кидать их в разработчиков с дежурным отговоркой «читай, там всё написано».\n                QA должны подключаться уже на этапе проработки требований и обдумывать задачу с точки зрения edge-кейсов.\n            </p>\n            <p>\n                В итоге команда не пишет код, пока не рассмотрит задачу с точек зрения бизнеса, возможностей разработки, качества и безопасности. И каждый из участников будет иметь равный голос и право на разумное «нет». \n            </p>\n            <p>\n                Если вы нашли команду, в которой каждая задача обсуждается тремя амиго — будьте уверены, с agile там всё в порядке.\n            </p>\n        \n\n\n        `\n    },\n    {\n        questionText: 'Как фиксируются принятые архитектурные решения',\n        answerOptions: [\n            { answerText: 'В Architectural Decision Record фиксируются все «Почему» ', score: 2 },\n            { answerText: 'В таск-трекере заводят задачи, в которых расписаны все «Как». Например, прикрутить kafka', score: 0 },\n            { answerText: 'Решения не фиксируются', score: 0 },\n        ],\n        description: `\n        <p>\n            Плохо дело, когда команда не может вспомнить, почему выбрали MongoDB или куда-то натыкали микросервисов. \n            ак «исторически сложилось» или тимлид принёс с последней high-load конференции, но суть в том, что никто не вспомнит, \n            на основании чего принимались решения.\n        </p>\n        <p>\n            Без понимания причин команда обречена ходить по кругу, как в кино про день сурка. \n            Монолит → распределенная структура  → монолит, и так, пока все не выгорят.\n        </p>\n        <p>\n            Зрелые команды ведут Architectural Decision Records, в которых фиксируют значимые архитектурные решения, \n            их причины, альтернативы, плюсы и минусы.\n        </p>\n        <p>\n            Таски в Jira для этого плохо подходят. В них редко записывают результат исследования и причины изменений. \n            А сами таски часто теряются. Попробуйте найти задачу, закрытую два года назад.\n        </p>`\n    },\n    {\n        questionText: 'Можно ли начать полноценно разрабатывать в первый же рабочий день?',\n        answerOptions: [\n            { answerText: 'Да, команда выдаст доступы, можно тут же развернуть и запустить проект ', score: 2 },\n            { answerText: 'Нет, весь первый день уйдёт на бумажки и получение доступов', score: 0 },\n        ],\n        description: `\n        <p>\n            Вопрос помогает оценить степень бюрократии на проекте и производственную культуру. \n        </p>\n        <p>\n            Если заведение всех нужных учёток занимает недели, представьте, что там у них с другими процессами.\n        </p>\n        <p>\n            Скорость и простота развертывания тоже много вам скажут.\n        </p>\n        <p>\n            Например, тимлид хвастается, что у них такой большой и важный проект, что его нельзя просто так взять и развернуть. \n            У новичка на это уходит три дня, а у гениального новичка — всего два.\n        </p>\n        <p>\n            Но три дня на развертывание говорят только о том, что тимлид не понимает своей основной задачи — упрощать работу разработчиков.\n        </p>\n        <p>\n            Любой проект должен собираться и запускаться по одной команде. \n            Если вместо кнопки длинный readme по запуску, поздравляю, вы нашли зону роста. Конвертируйте readme в bash-скрипт.\n        </p>`\n    },\n];","import React from 'react';\nimport Card from '@material-ui/core/Card';\nimport Typography from '@material-ui/core/Typography';\nimport CardContent from '@material-ui/core/CardContent';\nimport ReactHtmlParser from \"react-html-parser\";\n\nexport default function DescriptionBox(props) {\n\n    return (\n        <Card variant=\"outlined\">\n        <CardContent>\n            <Typography  variant=\"body1\" gutterBottom>\n                {ReactHtmlParser(props.description)}\n            </Typography>\n        </CardContent>\n        </Card>\t\n    );\n}","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\n\nexport default function QuestionBox(props){\n    return (\n    <>\n        <Typography variant=\"subtitle1\" gutterBottom>\n            Вопрос {props.currentIndex + 1} из {props.totalQuestions}\n        </Typography>\n        <Typography variant=\"h3\" gutterBottom>\n            {props.text}\n        </Typography>\n    </>\n    )\n}","import React from 'react';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\n\nexport default function AnswersGroup(props) {\n\n    return (\n        <FormControl component=\"fieldset\">\n        <RadioGroup aria-label=\"anwers\" name=\"answers\" value={props.currentAnswerIndex} onChange={props.onChange}>\n            {\n                props.answers.map(\n                    (answerOption, index) => \n                        <FormControlLabel \n                            value={index.toString()} \n                            control={<Radio color={answerOption.score>0? \"primary\":\"secondary\"}/>} \n                            label={answerOption.answerText} />\n                    )\n            }\n        </RadioGroup>\n        </FormControl>\n    )\n}","import React, { useState } from 'react';\nimport { Button } from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport { questions } from '../Questions';\nimport DescriptionBox from '../quiz/DescriptionBox';\nimport QuestionBox from '../quiz/QuestionBox';\nimport AnswersGroup from '../quiz/AnswersGroup';\n\nexport default function QuizzPage(props) {\n\n\tconst [currentQuestion, setCurrentQuestion] = useState(0);\n\tconst [score, setScore] = useState(0)\n\tconst [currentAnswerIndex, setCurrentAnswerIndex] = useState(-1)\n\n\tconst handleNextQuestionButton = (scoreFortheAnswer) => {\n\t\tconst currentAnswerScore = questions[currentQuestion].answerOptions[currentAnswerIndex].score\n        const newScore = score + currentAnswerScore\n\t\tsetScore(newScore)\n        props.updateScore(newScore)\n\n\t\tconst nextQeustion = currentQuestion + 1;\n\t\tif (nextQeustion < questions.length) {\n\t\t\tsetCurrentQuestion(nextQeustion)\n\t\t}\n\n\t\tsetCurrentAnswerIndex(-1)\n\t}\n\n\n\t  const handleAnswerChange = (event) => {\n\t\tsetCurrentAnswerIndex(event.target.value)\n\t  };\n\n    function isTheLastQuestion() {\n        return currentQuestion + 1 === questions.length\n    }  \n\n\treturn (\n\t\t<>\n\t\t\t<Grid item>\n\t\t\t\t<QuestionBox \n\t\t\t\t\ttext={questions[currentQuestion].questionText}\n\t\t\t\t\tcurrentIndex={currentQuestion}\n\t\t\t\t\ttotalQuestions={questions.length}\n\t\t\t\t/>\n\t\t\t</Grid>\t\n\n\t\t\t<Grid item>\n\t\t\t\t<AnswersGroup \n\t\t\t\t\tonChange={handleAnswerChange}\n\t\t\t\t\tanswers={questions[currentQuestion].answerOptions}\n\t\t\t\t\tcurrentAnswerIndex={currentAnswerIndex}\n\t\t\t\t/>\n\t\t\t</Grid>\t\n\n\t\t\t<Grid item>\n\t\t\t\t{currentAnswerIndex !== -1 ? (\n\t\t\t\t<DescriptionBox description={questions[currentQuestion].description} />\n\t\t\t) : (<></>) \n\t\t\t}\n\t\t\t</Grid>\n\n\t\t\t<Grid item>\n\t\t\t\t{currentAnswerIndex !== -1 ? (\n\t\t\t\t\t!isTheLastQuestion() ? (\n\t\t\t\t\t\t<Button variant=\"outlined\" color=\"primary\" onClick={() => handleNextQuestionButton()}>Следующий вопрос</Button>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<Button variant=\"outlined\" color=\"primary\" href=\"#/score\">Результаты</Button>\n\t\t\t\t\t)\n\t\t\t\t\t) : (<></>) \n\t\t\t\t}\n\t\t\t</Grid>\n\t\t</>\n\t);\n}\n","import React from 'react';\nimport { Button } from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\n\nexport default function IntroPage() {\n\n\treturn (\n\t  <>\n\t\t<Grid item>\n\t\t\t<Typography variant=\"subtitle1\" gutterBottom>\n\t\t\t\tStringConcat тест\n\t\t\t</Typography>\n\t\t\t<Typography variant=\"h3\" gutterBottom>\n\t\t\t\t17 вопросов для оценки кровавости энтерпрайза\n\t\t\t</Typography>\n\t\t\t</Grid>\t\n\n\t\t\t<Grid item>\n\t\t\t\t<Typography variant=\"body\" gutterBottom>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tМы составили тест, который поможет вам дистанционно оценить глубину кроличьей норы. \n\t\t\t\t\t\tПройдите сами, чтобы проверить текущую команду, или отправьте потенциальному работодателю.\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tТест вдохновлён <a href=\"https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/\">опросником Джоэля Спольски</a>, \n\t\t\t\t\t\tкоторый придумал StackOverflow. Опроснику уже двадцать лет, так что мы его немного расширили и доработали.\n\t\t\t\t\t</p>\n\t\t\t\t</Typography>\n\t\t\t</Grid>\t\n\n\t\t\t<Grid item>\n\t\t\t\t<Button variant=\"outlined\" color=\"primary\" href=\"#/quiz\">Начать</Button>\n\t\t\t</Grid>\n\t\t</>\n\t);\n}\n","import React from 'react';\nimport { Button } from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\nexport default function ScorePage(props) {\n\n\treturn (\n        <>\n            <Grid item>\n                <Typography variant=\"subtitle1\" gutterBottom>\n                    Таки все\n                </Typography>\n                <Typography variant=\"h3\" gutterBottom>\n                    Результаты\n                </Typography>\n            </Grid>\t\n            <Grid item>\n                Вы набрали {props.score} из {props.maximum}\n            </Grid>\n            <Grid item>\n            <>\n                <Typography variant=\"body\" gutterBottom>\n                    <p>\n                        <b>От 25 баллов и выше</b><br/>\n                        Элита. Можно смело устраиваться. Если не наврали, работать будет комфортно.\n                    </p> \n\n                    <p>\n                        <b>18–24 баллов</b><br/>\n                        Очень хорошая команда. Стоит рассматривать, даже если предлагают чуть ниже рынка.\n                    </p>\n\n                    <p>\n                        <b>18–24 баллов</b><br/>\n                        Очень хорошая команда. Стоит рассматривать, даже если предлагают чуть ниже рынка.\n                    </p>\n\n                    \n                    <p>\n                        <b>13–17 баллов</b><br/>\n                        Хорошая команда. Комфортные условия, возможность чему-то научиться и привнести своего.\n                    </p>\n\n\n                    <p>\n                        <b>17–12 баллов</b><br/>\n                        Важно понять, входят ли проблемы в вашу зону ответственности. Если не входят, просить выше среднего по рынку. Если вы сможете повлиять на проблемы и понравился коллектив, можно пробовать.\n                    </p>\n\n                    <p>\n                        <b>Ниже 7 баллов</b><br/>\n                        Бежать.<br/>\n                        Если компания небольшая и вы уверены в своих силах реформатора, можно попробовать.\n                    </p>\n                </Typography>\n                </>\n            </Grid>\t\n\n            <Grid item>\n                <Button variant=\"outlined\" color=\"primary\" href=\"https://howto.stringconcat.com/\">Курс</Button>\n            </Grid>\n        </>\n\n\t);\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport StepContent from '@material-ui/core/StepContent';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n  },\n  stepper: {\n    flexDirection: 'column-reverse'\n  },\n  button: {\n    marginTop: theme.spacing(1),\n    marginRight: theme.spacing(1),\n  },\n  actionsContainer: {\n    marginBottom: theme.spacing(2),\n  },\n  resetContainer: {\n    padding: theme.spacing(3),\n  },\n}));\n\nfunction getSteps() {\n  return [ \n      {score: '< 7', team: 'Бежать без огшялдки'}, \n      {score: '7–12', team: 'Проблемная команда'}, \n      {score: '13–17', team: 'Хорошая команда'}, \n      {score: '18–24', team: 'Очень хорошая команда'}, \n      {score: '25+', team: 'Элита'}, \n    ];\n}\n\nfunction getStepContent(step) {\n  switch (step) {\n    case 0:\n      return `Если компания небольшая и вы уверены в своих силах реформатора, можно попробовать.`;\n    case 1:\n      return 'Важно понять, входят ли проблемы в вашу зону ответственности. Если не входят, просить выше среднего по рынку. Если вы сможете повлиять на проблемы и понравился коллектив, можно пробовать.';\n    case 2:\n      return `Комфортные условия, возможность чему-то научиться и привнести своего.`;\n    case 3:\n    return `Очень хорошая команда. Стоит рассматривать, даже если предлагают чуть ниже рынка.`;     \n    case 4:\n        return `Элита. Можно смело устраиваться. Если не наврали, работать будет комфортно.`;                  \n    default:\n      return 'Unknown step';\n  }\n}\n\nexport default function VerticalLinearStepper() {\n  const classes = useStyles();\n  const [activeStep, setActiveStep] = React.useState(0);\n  const steps = getSteps();\n\n  const handleNext = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\n  };\n\n  const handleBack = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\n  };\n\n  const handleReset = () => {\n    setActiveStep(0);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Stepper className={classes.stepper}  orientation=\"vertical\">\n        {steps.map((label, index) => (\n          <Step key={label.score} expanded={true} active={index===3}>\n            <StepLabel>{label.score} <b>{label.team}</b></StepLabel>\n            <StepContent>\n              <Typography>{getStepContent(index)}</Typography>\n            </StepContent>\n          </Step>\n        ))}\n      </Stepper>\n    </div>\n  );\n}","import React, {useState} from 'react';\nimport {\n\tHashRouter as Router,\n\tSwitch,\n\tRoute,\n  } from \"react-router-dom\";\nimport Grid from '@material-ui/core/Grid';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Footer from './layout/Footer';  \n\n\nimport QuizzPage from './pages/QuizPage';\nimport IntroPage from './pages/IntroPage';\nimport ScorePage from './pages/ScorePage';\nimport VerticalLinearStepper from './pages/ScorePage2';\n\n\nconst useStyles = makeStyles((theme) => ({\n\troot: {\n\t  display: 'flex',\n\t  flexDirection: 'column',\n\t  minHeight: '100vh',\n\t},\n\tmain: {\n\t  marginTop: theme.spacing(8),\n\t  marginBottom: theme.spacing(2),\n\t},\n  }));\n\n\nexport default function App() {\n\n\tconst classes = useStyles();\n\n\tconst [score, setScore] = useState(0)\n\n\treturn (\n\t\t<div className={classes.root}>\n\t\t\t<CssBaseline />\n\t\t\t<Container component=\"main\" className={classes.main} maxWidth=\"md\">\n\t\t\t\t<Grid container spacing=\"3\" direction=\"column\" justifyContent=\"flex-start\" alignItems=\"stretch\">\n\t\t\t\t\t<Router basename={process.env.PUBLIC_URL}>  \n\t\t\t\t\t\t<Switch>\n\t\t\t\t\t\t\t<Route path=\"/quiz\">\n\t\t\t\t\t\t\t<\tQuizzPage updateScore={setScore} />\n\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t<Route path=\"/score\">\n\t\t\t\t\t\t\t\t<ScorePage score={score} maximum={32}/>\n\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t<Route path=\"/score2\">\n\t\t\t\t\t\t\t\t<VerticalLinearStepper></VerticalLinearStepper>\n\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t<Route exactPath=\"/\">\n\t\t\t\t\t\t\t\t<IntroPage />\n\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t</Switch>\n\t\t\t\t\t</Router>\n\t\t\t\t</Grid>\n\t\t\t</Container>\n\t\t<Footer/>\n\t  </div>\n\t);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}